<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Категория: Визуализация | DataDeep Evil Twin]]></title>
  <link href="http://datadeep.ru/blog/categories/vizualizatsiia/atom.xml" rel="self"/>
  <link href="http://datadeep.ru/"/>
  <updated>2015-09-17T02:19:07+03:00</updated>
  <id>http://datadeep.ru/</id>
  <author>
    <name><![CDATA[Команда datadeep.ru]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Многообразие визуализаций]]></title>
    <link href="http://datadeep.ru/blog/2015/09/01/mnoghoobraziie-vizualizatsii/"/>
    <updated>2015-09-01T20:52:27+03:00</updated>
    <id>http://datadeep.ru/blog/2015/09/01/mnoghoobraziie-vizualizatsii</id>
    <content type="html"><![CDATA[<div>
  <style type="text/css">

    ul{margin:1em 0 1em 2em;}
    ol{margin:1em 0 1em 2em;}

  </style>
</div>

<p>Визуализация является важной частью Data Science, представляя собой удобный интерфейс между данными и человеком. Но различные ее виды встречаются не только в науке о данных. Чтобы обозначить контекст, в котором существует визуализация <em>данных</em>, я покажу разнообразие жанров визуализации <em>вообще</em>, забираясь в миры естественных наук и даже искусства.</p>

<p><img src="/images/teaser.png" width="768" height="576" title="Иллюстрации из книги Эрнста Геккеля “Красота форм в морских глубинах”" ></p>

<!-- more -->

<p>В пайплайне науки о данных визуализация встречается преимущественно в двух ситуациях: для первичного анализа данных и для представления полученных результатов после окончания работы.</p>

<p>В связи с этим существует условное деление графики на исследовательскую (exploratory) и презентационую (explanatory).
Первая должна помогать в работе, вторая – нести внятное сообщение.</p>

<p>Такое деление достаточно грубое и в жизни чаще встречаются промежуточные варианты.
Для нас важно то, что у этих видов графики различные цели.
От целей мы и будем отталкиваться в разговоре о многообразии. Я рассмотрю следующие жанры:</p>

<ul>
  <li>Научная визуализация;</li>
  <li>Исследовательская графика;</li>
  <li>Аналитическая графика;</li>
  <li>Презентационная графика;</li>
  <li>Инфографика;</li>
  <li>Скетч;</li>
  <li>Data art.</li>
</ul>

<h2 id="section">Научная визуализация</h2>

<p>Визуализация в науке нужна для иллюстрации и интерпретации научных результатов.
Она помогает показать то, что иначе невозможно, либо очень сложно увидеть.</p>

<p>Это может быть что-то слишком большое (карта мира) или что-то слишком маленькое (модель атома), то, что невозможно увидеть (инфракрасное излучение, биополе:))) или что сложно достать (человеческие органы).
Визуализироваться могут этапы временного развития (развитие эмбриона) или коллекция  образцов, собранная в разных точках Земли. 
С помощью графического отображения можно упорядочить элементы реального мира или изобразить что-то, в природе не встречающееся (результаты компьютерного моделирования, математические объекты).</p>

<p>Стоит заметить, что картинки сильно различаются в зависимости от специфики научной области и задачи. Посмотрим на некоторые примеры из различных наук.</p>

<p><strong>Медицина</strong></p>

<p><img src="/images/Medical.png" title="Снимок УЗИ. Рисунок Леонардо да Винчи. Компьютерная модель сердца" ></p>

<p><strong>География</strong></p>

<p><img src="/images/Geographic.png" title="Карты: геологическая, географическая и политическая" ></p>

<p><strong>Астрономия</strong></p>

<p><img src="/images/Astronomy.png" title="Зарисовки пятен на Солнце. Фотография Вселенной" ></p>

<p><strong>Химия</strong></p>

<p><img src="/images/Chemistry.png" title="Модель молекулы ДНК. Таблица Менделеева" ></p>

<p><strong>Физика</strong></p>

<p><img src="/images/Physics.png" title="Симуляция смешивания жидкостей. Использование визуалицации в самолетосторении" ></p>

<p><strong>Математика</strong></p>

<p><img src="/images/Math.png" title="Архимед чертит геометрические фигуры на песке. Компьютерная визуализация аттрактора Лоренца" ></p>

<p>Как видно из этих иллюстраций, с течением времени меняются методы и возможности графического отображения. 
Этот вид визуализации появился одним из первых и всегда находится на переднем краю технологического прогресса.</p>

<p>Подробнее об актуальных направлениях можно почитать в <a href="http://en.wikipedia.org/wiki/Scientific_visualization">статье на Википедии</a> (русскоязычная версия отсутствует). На русском можно почитать материалы конференции <a href="http://www.graphicon.ru">Графикон</a> и журнал <a href="http://sv-journal.org">“Научная визуализация”</a>.</p>

<h2 id="section-1">Исследовательская (разведочная) графика</h2>

<p>Если до этого мы говорили о естественных науках и чистой математике, то теперь вернемся к тематике нашего блога и обратимся к науке о данных. Для начала рассмотрим примеры визуализаций, создаваемых на этапе исследования данных. Они делаются для персонального использования и нужны в первую очередь для анализа.</p>

<p>Этот этап по английски называется exploratory data analysis, в русскоязычной литературе встречаются термины “описательная статистка” и  “разведочный анализ данных”. Понятие ввел Дж. Тьюки в своей книге “Анализ результатов наблюдений”, в основу которой положен принцип:</p>

<blockquote>
  <p>“Важно понять, что́ вы можете делать, прежде чем вы научитесь измерять, насколько хорошо вы это сделали.”</p>
</blockquote>

<p>Книга написана в 1977 году  и изложенные в ней методы уже не актуальны. Основными инструментами ему служили математические таблицы, логарифмическая линейка, миллиметровка и калька. Но принципы построения полезных графиков с тех пор не изменились. Вот еще одна важная цитата из книги:</p>

<blockquote>
  <p>“Графики, подчеркивающие лишь то, что нам уже известно, нередко не стоят места, которое они занимают. Графики, которые надо рассматривать с лупой, чтобы увидеть в них главное, заставляют нас тратить понапрасну время и мало полезны. График имеет наибольшую ценность тогда, когда он <em>вынуждает</em> нас заметить то, что мы совсем не ожидали увидеть.”</p>
</blockquote>

<p>Разведочный анализ — фундамент исследования данных. Графики на этом этапе позволяют решать следующие задачи:</p>

<ul>
  <li>понять свойства данных;</li>
  <li>выявить ошибки;</li>
  <li>определить взаимосвязи между переменными;</li>
  <li>обнаружить закономерности;</li>
  <li>предложить стратегии моделирования.</li>
</ul>

<p>Такие графики делаются быстро и в большом количестве. При этом не уделяется внимание легенде, осям, цветам и прочим элементам оформления.
	    Рассмотрим несколько примеров.</p>

<p>Пример 1: иногда визуальная оценка позволяет найти ошибки кластеризации и помогает подобрать правильный алгоритм.</p>

<p><img src="/images/explore-2.png"></p>

<p>Пример 2: визуализация при исследовании регрессии – иллюстрация <a href="https://ru.wikipedia.org/wiki/Парадокс_Симпсона">парадокса Симпсона</a>.</p>

<p><img src="/images/explore-1.png"></p>

<p>Пример 3: построение гистограмм для различных признаков – один из шагов в первичном исследовании данных.</p>

<p><img src="/images/hist.png"></p>

<p>Пример 4: график поведения функции потерь помогает выбрать оптимальное значение параметра алгоритма обучения с учителем</p>

<p><img src="/images/nn_epochs.jpg"></p>

<p>В следующих статьях мы подробнее рассмотрим инструменты, которые позволяют быстро проводить подобный визуальный анализ.</p>

<p>Как уже отмечалось ранее, графики из этой категории могут быть понятны только самому автору, так как не содержат необходимых пояснений и не предназначены для широкой аудитории.
Подобные диаграммы - инструмент ученого или аналитика. Их место на рабочем компьютере.
Стоит публиковать такие изображения только после некоторой доработки.</p>

<h2 id="section-2">Аналитическая графика</h2>

<p>Это промежуточный этап между исследованием и презентацией. А если точнее, то это презентация, которая не дает готовых выводов, но  предоставляет читателю возможность исследовать данные  и делать выводы самостоятельно.</p>

<p>Это, возможно, самый сложный для создания, но и самый интересный тип визуализации. Он объединяет в себе строгость в отношении к исходным данным и визуальную привлекательность. Много интересного можно почерпнуть из книг Эдварда Тафти. Он является ведущим современным специалистом в области визуализации, написал несколько книг по отображению информации.</p>

<p>Приведу здесь список принципов для аналитической графики по его книге Beautiful Evidence (глава The Fundamental Principles of Analytical Design)</p>

<ol>
  <li>Показывать сравнения;</li>
  <li>Показывать механизм, объяснение, структуру (причинно-следственные связи);</li>
  <li>Показывать многомерные данные;</li>
  <li>Объединять типы представления (разные графики, текст) в единое представление;</li>
  <li>Документация: пояснять данные с помощью легенды, масштабов, указания на источники;</li>
  <li>Содержание превыше всего.</li>
</ol>

<p>Рассмотрим несколько классических примеров. 
Основателем графических методов в статистике считается шотландский инженер и политэконом Уильям Плейфер. Его работы относятся к концу 18 - началу 19 века. На рисунке ниже представлены линейчатый график и гистограмма из работы “Коммерческий и политический атлас”  1786 года.</p>

<p><img src="/images/Playfair.png"></p>

<p>Диаграмма французского инженера Шарля Минара (Charles Minard) о походе Наполеона в Россию — отличная иллюстрация изложенных выше принципов. На схеме мы видим изменение численности французской армии по мере наступления на Москву (бежевый цвет) и последующего отступления (черный цвет). Для отступления прилагается график изменения температуры. Диаграмма снабжена пояснениями, подписями населенных пунктов и рек.</p>

<p><img src="/images/Minard.jpg"></p>

<p>Диаграмма Флоренс Найтингейл — одна из первых круговых диаграмам. С ее помощью сестра милосердия продемонстрировала, что в британской армии от антисанитарии умирает больше людей, чем от ранений.</p>

<p><img src="/images/Nightingale-mortality.jpg"></p>

<p>Графика этого типа отлично подходит для научной статьи, сайта в интернете или раздаточного материала.</p>

<p>На современные примеры аналитической графики повлияло развитие браузеров, поддерживающих анимацию и интерактивность. Более того, такая визуализация доступна любому пользователю сети.
С помощью интерактива можно группировать и фильтровать данные, рассматривать их в разном масштабе — от общей картины до частностей.
Много примеров такой графики создано с помощью Javascript библиотеки <a href="http://d3js.org">D3.js</a>. Хорошей иллюстрацией является <a href="http://white-nights.datalaboratory.ru">визуализация марафона “Белые ночи”</a> от Лаборатории данных.</p>

<p><img src="/images/maraphon.png"></p>

<p>Cоздающий подобную графику человек должен разбираться не только в данных и предметной области, но и в особенностях восприятия человеком визуальных образов, а еще в человеко-компьютерном взаимодействии.</p>

<p>Распространенным применением аналитической визуализации являются дэшборды — информационные панели, содержащие графики основных показателей. Они часто используются в бизнесе для мониторинга, создания отчетности и при принятии решений. Приведенный на картинке пример сделан с помощью сервиса <a href="http://www.tableau.com">Tableu</a>.</p>

<p><img src="/images/Dashboard.png"></p>

<p>Еще один замечательный пример интерактивного исследования данных — приложение <a href="http://www.gapminder.org">Trendalyzer</a>.
Пузырьковая диаграмма, демонстрирующая изменения экономических и социальных показателей для стран мира за последние десятилетия.</p>

<p><img src="/images/hans-rosling.jpg"></p>

<p>Стоит посмотреть шикарную <a href="http://www.youtube.com/watch?v=hVimVzgtD6w">первую презентацию</a>  этой программы ее автором — шведским профессором Хансом Рослингом на конференции TED. Это тот редкий случай, когда сложная графика на экране становится понятной благодаря анимации и сильному выступлению докладчика. Последующие выступления Рослинга также заслуживают внимания, в том числе с точки зрения наглядного изображения информации.</p>

<p>Самое время перейти к презентационной графике.</p>

<h2 id="section-3">Презентационная графика</h2>

<p>Здесь мы говорим о презентации в чистом виде, когда график несет в себе одну идею, недвусмысленное сообщение автора.
Отличие от аналитической графики заключается в том, что читатель не должен расшифровывать ваше послание, так как условия просмотра подобных изображений не предполагают длительного изучения.
Такую графику можно увидеть на слайдах презентации или по телевизору. Иногда простые графики встречаются в печатных изданиях.</p>

<p>При внешней простоте создать эффективную презентационную графику бывает непросто.</p>

<p>Для начала, важно подобрать подходящий <strong>тип диаграммы</strong>, который донесет нашу мысль наиболее наглядно.
 Много полезных советов о выборе типа графика можно найти в книге Джина Желязны “Говори на языке диаграмм”. Книга построена как учебник со множеством примеров и упражнений.</p>

<p>Далее, надо учесть <strong>контекст</strong> восприятия и не перегрузить диаграмму данными.
Обычно у зрителя нет возможности внимательно исследовать график. 
Очень часто люди показывают на слайдах непонятные, перегруженные текстом и данными графики, которые практически невозможно объяснить.</p>

<p>В качестве примера приведу иллюстрацию из замечательной книги Алексея Каптерева “Мастерство презентации”.
Так он представляет типичный слайд с графиком из корпоративной презентации:</p>

<p><img src="/images/slide01.png"></p>

<p>Научные презентации тоже часто изобилуют сложными диаграммами, как будто это повышает доверие к автору.
Но опять же, стоит учитывать ожидания аудитории — на научной конференции люди больше настроены думать и вникать, так что могут просто не доверять слишком простой диаграмме.
При этом не забывайте, что способности к восприятию ограничены даже у ученых. 
Не стоит превращать свои слайды в склад всех имеющихся данных. 
Алексей пишет:</p>

<blockquote>
  <p>“Данные — это всего лишь способ доказать свою идею. Хорошая новость состоит в том, что если у вас есть идея, если вы знаете, что именно вы хотите сказать, то существует множество способов представить свои данные красиво и при этом не перегрузить аудиторию.”</p>
</blockquote>

<p>Для того, чтобы презентационная диаграмма удалась, надо убрать все лишнее, оставив только то, что подтверждает основную идею.
Саму идею стоит вынести в заголовок графика.</p>

<p>Рассмотрим приведенное в той же книге преобразование диаграммы Минара. Превращаем аналитическую графику в картинку, которая будет убедительно смотреться на слайде презентации.
“Нижняя диаграмма выглядит сильно упрощенной, но она способна донести вложенное в нее послание. Дело в том, что на самом деле необязательно видеть каждую российскую речушку, чтобы понять: Наполеон не был побежден в какой-то крупной битве.”</p>

<p><img src="/images/slide02.png"></p>

<p>Из-за своей презентационной специфики этот тип визуализации наиболее подвержен <strong>графическим манипуляциям</strong>. Смещение оси ординат, игры с относительным масштабом и перспективой, все прелести круговой диаграммы и “крутые” 3D эффекты — все это встречается здесь очень часто. Иногда умышленно, иногда по незнанию. Те же трехмерные эффекты встроены в PowerPoint и к сожалению все еще пользуются популярностью.</p>

<p>На слайде старины Стива сектор 19.5% выглядит больше, чем  21.2% за счет добавления объема. С круговой диаграммой на второй картинке тоже что-то не так.
Подробнее про подобные манипуляции можно почитать <a href="http://en.wikipedia.org/wiki/Misleading_graph">здесь</a>.</p>

<p><img src="/images/Presentation.png"></p>

<h2 id="section-4">Инфографика</h2>

<p>Слово инфографика в последнее время стало очень популярно. 
Из-за отсутствия точного определения его часто путают с другими видами визуализации или называют инфографикой любую красивую картинку с цифрами.</p>

<p>Я бы выделил следующие особенности, присущие именно инфографике. Во-первых, цель инфографики — просвещение и развлечение. Во-вторых, инфографика создается дизайнерами и журналистами. Существует даже специальный термин — журналистика данных. В-третьих, большое внимание уделяется привлекательности картинки.</p>

<p>Хорошая инфографика похожа на аналитическую визуализацию. Но она не нацелена на поиск закономерностей или принятие решений, ее роль скорее просветительская. Рассмотрим несколько примеров.</p>

<p>Визуализация нобелевских лауреатов</p>

<p><img src="/images/nobel-prizes-and-laureates.jpg"></p>

<p>Красивая инфографика о китах</p>

<p><img src="/images/INFO-BALLENA.jpg"></p>

<p>На картинке ниже мы видим хорошее применение сильной метафоры.
В аналитической графике перевернутая ось ординат только сбивала бы с толку, но в инфографике для усиления эмоционального воздействия такой прием допустим.</p>

<p><img src="/images/iraqdeaths.jpg"></p>

<p>Примеры на русском можно посмотреть здесь: <a href="http://infographicsmag.ru/journal/">журнал “Инфографика”</a>, <a href="http://ria.ru/infografika/">инфографика РИА Новости</a>.</p>

<h2 id="section-5">Скетчи (рисунки на салфетке)</h2>

<p>Иногда нужно визуализировать не данные, а идеи, концепции и взаимосвязи. 
Тут на помощь приходят простые рисунки от руки. 
Применяются они на брейнштормах или при объяснении. Как и исследовательская графика, являются подручным инструментом, но основаны не на данных, а на идеях.
Картинка <a href="http://habrahabr.ru/post/249759/">отсюда</a>.</p>

<p><img src="/images/sketch01.png"></p>

<p>Важный поджанр — mind maps (интеллект-карты, диаграммы связей). Они используются при обучении или мозговом штурме, для запоминания или решения проблем с помощью визуального мышления. Часто назначение этого вида рисунков — выплеснуть на бумагу содержимое головы. 
Поэтому иногда понять смысл рисунка может только автор.</p>

<p><img src="/images/sketch02.png"></p>

<p>В мире скетчей существует свое разнообразие жанров и различные методики их использования, но в этой статье мы на них останавливаться не будем.
Подробнее про визуальное мышление можно почитать в книге Дэна Роэма “Практика визуального мышления”.</p>

<h2 id="section-6">Арт</h2>

<p>Художники, работающие в жанре генеративного искусства (не путать с дегенеративным) используют те же методы, что и исследователи данных, но стремятся достичь эстетической привлекательности результата. 
С помощью данных, полученных из интернета или каких-либо датчиков, он создают картины, видеоролики и интерактивные инсталляции.
Очень часто в качестве инструмента используют язык Processing.</p>

<p>Ярким представителем является берлинская студия <a href="http://www.onformative.com/">Onformative</a>. Ниже представлены примеры их работ: визуализация фейсбучной страницы и интерактивная витрина для магазина Nike.</p>

<p><img src="/images/onformative_facebook.jpg">
<img src="/images/onformative_nike.jpg"></p>

<p>Большинство работ подобного жанра, хоть и основаны на числовых данных, располагают только к эстетическому восприятию получившейся картины. Ниже изображена визуализация числа Пи.</p>

<p><img src="/images/art-of-pi.png" title="Визуализация числа Пи" ></p>

<h2 id="section-7">Заключение</h2>

<p>Итак, мы достаточно поверхностно рассмотрели применение визуализации в различных областях человеческой деятельности от науки до искусства.
Про каждую из этих областей можно писать гораздо подробнее, ведь мир визуализаций невероятно разнообразен.
К тому же он подвижен, живет и развивается. Новые технологические изобретения, такие как дополненная и виртуальная реальности, голография и пр. привнесут свой вклад в развитие этой области.</p>

<p>В следующих статьях этого раздела мы рассмотрим инструменты для создания различных визуализаций. Начнем с разведочной графики, грамотное применение которой может существенно упростить работу датолога. Но вне зависимости от области применения при создании графики мы всегда должны помнить о цели нашей работы и задавать себе важнейшие вопросы:</p>

<ul>
  <li>что за данные мы визуализируем;</li>
  <li>что мы хотим сказать своей визуализацией;</li>
  <li>кто будет работать с этой графикой;</li>
  <li>и в каком контексте.</li>
</ul>

<p><img src="/images/ending.png" title="Элементы компьютетной графкик для фильма “Трон: Наследие”" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Краткое введение в D3.js]]></title>
    <link href="http://datadeep.ru/blog/2014/12/03/kratkoie-vviedieniie-v-d3-dot-js/"/>
    <updated>2014-12-03T11:46:40+03:00</updated>
    <id>http://datadeep.ru/blog/2014/12/03/kratkoie-vviedieniie-v-d3-dot-js</id>
    <content type="html"><![CDATA[<script src="http://d3js.org/d3.v2.js"></script>

<p>В этой статье мы познакомимся с мощным инструментом визуализации данных – библиотекой D3.js.
Она позволяет представлять ваши данные в различных формах и  добавлять эффектные графики на веб-страницы.</p>

<p><img src="/images/d3.png" width="768" height="316" title="D3.js examples" ></p>

<!-- more -->

<p>Существует много различных инструментов визуализации, некоторые из них имеют долгую историю и плотно прижились среди специалистов. Например, с помощью библиотеки ggplot2 для языка R можно строить достаточно сложные графики всего несколькими строчками кода, а ученые, использующие язык Python, создают графики при помощи библиотеки Matplotlib.</p>

<p>Но увеличение количества информации, развитие Интернета и рост графических возможностей современных программ создают новые ожидания от визуального представления данных:</p>

<ul>
  <li><strong>Интерактивность.</strong> Интерактивный график может демонстрировать изменения в зависимости от настройки параметров, сравнивать показатели для определенной пользователем выборки или вовсе показывать изменения данных в реальном времени. Такая визуализация не только предъявляет результат, но и позволяет зрителю анализировать данные самостоятельно;</li>
  <li><strong>Возможность публикации в Интернете.</strong> Визуализация служит не только для анализа данных, это еще и лучший способ поделиться своими выводами с миром. Выложить в сеть статичную картинку нетрудно, но интерактивная визуализация должна быть доступна без установки дополнительных приложений, то есть исполняться прямо в браузере;</li>
  <li><strong>Доступность данных.</strong> В случае со статичной картинкой, вы не можете получить доступ к исходным данным, чтобы что-то уточнить или проверить. Визуализация, создаваемая в вашем браузере на основе массива данных, не лишает Вас такой возможности;</li>
  <li><strong>Информационная эстетика.</strong> Речь здесь идет не о красоте, а об удобстве восприятия. Настройки по умолчанию для шрифтов и цветовых схем в некоторых системах зачастую не самые удачные, а изменить их не всегда легко. К тому же многие старые системы генерируют только растровые изображения, которые невозможно увеличить без потери качества. Выход: использовать векторную графику и графические возможности современных браузеров.</li>
</ul>

<p>В связи с этими ожиданиями создаются новые инструменты или улучшаются старые. Например, библиотека Bokeh для языка Python использует для визуализации элемент canvas, созданный как контейнер для графики в HTML5, а инструмент Plotly  позволяет экспортировать результаты работы ggplot2, matplotlib и MATLAB в интерактивные веб-графики.</p>

<p>Но стандартом интерактивных веб-визуализаций можно смело назвать JavaScript библиотеку D3.js Майка Бостока. Библиотека создана в 2011 году и родилась из проекта Protovis. Основной принцип работы D3 заключается в создании элементов  веб-страницы на основе загруженных данных. Для этого используются современные стандарты HTML, SVG (векторная графика), CSS. Основные форматы данных - CSV и JSON.  D3 расшифровывается как Data Driven Documents, что вполне описывает философию библиотеки.</p>

<p>Основные преимущества D3:</p>

<ul>
  <li><strong>Прозрачность связи данных и представления.</strong> Визуальные элементы, создаваемые с помощью библиотеки, напрямую связаны с Вашими данными. Данные хранятся в атрибутах графических элементов;</li>
  <li><strong>Гибкость в выборе представления.</strong> В D3 нет заготовок для различного вида графиков (для хорошей визуализации надо написать не один десяток строк кода), но она позволяет создавать графические элементы и изменять их параметры в соответствии с задачей. Именно поэтому она так хороша для создания нестандартных визуализаций;</li>
  <li><strong>Интерактивность.</strong> D3 позволяет без особых сложностей превратить график в интерактивный интерфейс, который показывает только актуальную для пользователя информацию.</li>
</ul>

<p>Очень много крутых примеров можно найти на <a href="http://bost.ocks.org/mike/">сайте</a> создателя библиотеки Майкла Бостока.</p>

<h2 id="section">Практический пример</h2>

<p>Попробуем создать несложный график и познакомиться с принципами работы D3.</p>

<p>Перед началом работы для удобства отладки необходимо <a href="https://github.com/mbostock/d3/">скачать</a> библиотеку и сохранить ее в директорию проекта. Структура папок при этом будет выглядеть так:</p>

<p><code>
project-folder/
               d3/
                  d3.js
                  d3.min.js (optional)
               index.html
</code></p>

<p>Папка с библиотекой может иметь и другое имя, например содержать номер актуальной версии. Слово min означает ограниченный функционал для разработчика, но и ее вполне хватит для начала работы.</p>

<p>Я не буду останавливаться на описании основ веб-технологии, которые Вы можете изучить самостоятельно. Для начала достаточно понимать, как работает HTML-документ, для чего нужны стили CSS и  как устроена SVG графика. Весь приведенный в последующих примерах код должен работать в таком шаблоне (в поле src должен быть указан путь к той версии библиотеки, которую вы скачали):</p>

<p>&#8220;` html
&lt;!DOCTYPE html&gt;</p>
<html>
    <head>
        <meta charset="utf-8" />
        <title>D3 Page</title>
        <script type="text/javascript" src="d3/d3.js"></script>
    </head>
    <body>
    <div id="container"></div>
        <script type="text/javascript">
            // Your D3 code will go here
        </script>
    </body>
</html>
<p>&#8220;`</p>

<p>Начнем изучение с простейшего примера – построим диаграмму рассеяния (<em>scatterplot</em>) для небольшого массива данных.</p>

<div>
  <style type="text/css">

    .chart {
      font-family: Arial, sans-serif;
      font-size: 10px;
      margin-top: -40px;
    }

    .bar {
      fill: steelblue;
    }

    .axis path, .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

  </style>
</div>

<div id="container0" align="center"></div>
<script type="text/javascript">
        
        var w = 400;
        var h = 200;
        var padding = 30;

        
        var svg = d3.select("#container0")
             	      .append("svg")
          			  .attr("width", w)
          			  .attr("height", h);
        
        var dataset = [
                [50, 20], [480, 90], [250, 50], [100, 133], [330, 95],
                [410, 12], [475, 44], [25, 167], [185, 21], [120, 88],[600, 150]
              ];

        
        var xScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[0]; })])
                     .range([padding, w-padding*2]); 
                     
        var yScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[1]; })])
                     .range([h - padding, padding]);
                     
        var rScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[1]; })])
                     .range([2, 5]);  
                     
                                
        var xAxis = d3.svg.axis()
                  .scale(xScale)
                  .orient("bottom")
                  .ticks(5);
                  
         var yAxis = d3.svg.axis()
                  .scale(yScale)
                  .orient("left")
                  .ticks(5);                    
                     
                     
         svg.selectAll("circle")
			   .data(dataset)
			   .enter()
			   .append("circle")
			   .attr("cx", function(d) {return xScale(d[0]);})
			   .attr("cy", function(d) {return yScale(d[1]);})
			   .attr("r", function(d) { return rScale(d[1]);})
			   .attr("fill",function(d){if (d[0]>100) {return "teal"} else {return "orange"}});

		
			svg.append("g")
			    .attr("class", "axis")
			    .attr("transform", "translate(0," + (h - padding) + ")")
                .call(xAxis);  
            svg.append("g")
                .attr("class", "axis")
                .attr("transform", "translate(" + padding + ",0)")
                .call(yAxis);                                 
        
</script>

<p>Но для начала нарисуем круг. Для этого нам надо выполнить несколько простых шагов:</p>

<ul>
  <li>Выделить элемент страницы, на который мы хотим добавить графику. В нашем случае мы выделяем элемент, у которого id = “container”;</li>
  <li>Добавить элемент svg и обозначить его параметры: ширину и высоту;</li>
  <li>Добавить в SVG контейнер наш кружок;</li>
  <li>Задать параметры кружка: координаты центра, радиус и цвет.</li>
</ul>

<p>&#8220;` javascript
var svg = d3.select(“#container”)       //1
            .append(“svg”)              //2
            .attr(“width”,100)
            .attr(“height”,100);</p>

<p>svg.append(“circle”)                    //3
   .attr(“cx”, 50)                      //4
   .attr(“cy”, 50)
   .attr(“r”, 30)
   .attr(“fill”,”orange”);
&#8220;`</p>

<p>Вот что у нас должно получится:</p>

<div id="container1"></div>
<script>


             var svg = d3.select("#container1")
             	      .append("svg")
          			  .attr("width",100)
          			  .attr("height",100);
          			  
          	svg.append("circle")
			   .attr("cx", 50)
			   .attr("cy", 50)
			   .attr("r", 30)
			   .attr("fill","orange");		  
	    
</script>

<p>Свойства нашего нового объекта мы можем менять не только при создании, но и при дальнейшей работе. Для этого есть два способа:</p>

<ul>
  <li>создать js-переменную и обращаться к ней;</li>
  <li>обращаться к элементам с помощью функции выделения select или selectAll.</li>
</ul>

<p>В примере ниже мы меняем радиус круга с помощью первого способа (1), а цвет – с помощью второго (2):</p>

<p><code>javascript
var svg = d3.select("#container")
            .append("svg")
            .attr("width",100)
            .attr("height",100);
var circle = svg.append("circle")
            .attr("cx", 50)
            .attr("cy", 50)
            .attr("r", 30);
circle.attr("r",50);                    //1
svg.select("circle")                    //2
   .attr("fill","teal");	
</code></p>

<div id="container2"></div>
<script>


             var svg = d3.select("#container2")
             	      .append("svg")
          			  .attr("width",100)
          			  .attr("height",100);
          			  
          	var circle=svg.append("circle")
			   .attr("cx", 50)
			   .attr("cy", 50)
			   .attr("r", 30);
			   
			circle.attr("r",50);
			
			svg.selectAll("circle").
			attr("fill","teal");	
			
				  
	    
</script>

<p>Все это прекрасно, но <strong>где же данные?</strong></p>

<p>Теперь используем массив данных для создания нескольких кругов.
Для этого применяется не вполне очевидная конструкция:</p>

<ul>
  <li>мы выделяем несуществующие (еще пока) элементы: selectAll(“circle”);</li>
  <li>связываем их с нашим массивом данных: data(dataset);</li>
  <li>создаем элементы: enter();</li>
  <li>добавляем на страницу окружности, используя данные.</li>
</ul>

<p>Механизм добавления окружностей тот же, что и примере выше. Отличие лишь в том, что окружность теперь создается для каждого элемента массива dataset. Атрибуты окружности (положение её центра) в данном случае определяются конкретными данными.</p>

<p><code>javascript
var svg = d3.select("#container")
            .append("svg")
            .attr("width",200)
            .attr("height",200);          			 
var dataset = [
            [50, 20], [480, 90], [250, 50], [100, 133], [330, 95],
            [410, 12], [475, 44], [25, 167], [185, 21], [120, 88],[600, 150]
              ];	
var circle = svg.selectAll("circle")                        //1
              .data(dataset)                                //2
              .enter()                                      //3
              .append("circle")                             //4
              .attr("cx",function(d){return d[0]})
              .attr("cy",function(d){return d[1]})
              .attr("r", 10);
circle.attr("fill","teal");
</code></p>

<div id="container3"></div>
<script>
             var svg = d3.select("#container3")
             	      .append("svg")
          			  .attr("width",200)
          			  .attr("height",200);
          			 
        var dataset = [
                [50, 20], [480, 90], [250, 50], [100, 133], [330, 95],
                [410, 12], [475, 44], [25, 167], [185, 21], [120, 88],[600, 150]
              ];		  
          	var circle=svg.selectAll("circle")
          	.data(dataset)
          	.enter()
          	   .append("circle")
			   .attr("cx",function(d){return d[0]})
			   .attr("cy",function(d){return d[1]})
			   .attr("r", 10);
			   
			circle.attr("fill","teal");
</script>

<p>Мы нарисовали много кружков, но у нас появилось пара проблем.</p>

<p>Во-первых кружков на рисунке явно меньше, чем элементов в нашем массиве. Это произошло из-за того, что размер нашего svg-элемента всего 200x200 пикселей, а значения в массиве dataset выходят за эти границы.</p>

<p>Во-вторых координатная система в svg устроена так, что ось Y направлена сверху вниз, что нас не устраивает, так как не очень удобно для восприятия.</p>

<p>Обе эти проблемы решаются с помощью функции масштабирования: scale. Это отображение, переводящее число из одного интервала в число из другого интервала. Областью значений чаще всего является разрешение картинки в пикселях. На рисунке ниже показан пример работы масштабирования для числовой и временной осей (рисунок взят из <a href="http://www.d3noob.org/2012/12/setting-scales-domains-and-ranges-in.html">cтатьи</a> с более подробным пояснением).</p>

<p><img src="/images/scale1.png" title="Scale" ></p>

<p>В примере ниже мы используем два таких отображения (для осей X и Y), задавая области определения (domain), области значений (range) и характер функции (linear).</p>

<p><code>javascript
var w = 400;
var h = 200;
var padding = 30; 
var dataset = [
            [50, 20], [480, 90], [250, 50], [100, 133], [330, 95],
            [410, 12], [475, 44], [25, 167], [185, 21], [120, 88],[600, 150]
              ];
var xScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[0]; })])
                     .range([padding, w-padding*2]); 
var yScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[1]; })])
                     .range([h - padding, padding]);
var svg = d3.select("#container")
            .append("svg")
            .attr("width",w)
            .attr("height",h);
var circle = svg.selectAll("circle")
                .data(dataset)
                .enter()
                .append("circle")
                .attr("cx",function(d){return xScale(d[0])})
                .attr("cy",function(d){return yScale(d[1])})
                .attr("r", 5)
                .attr("fill","teal");
</code></p>

<div id="container4"></div>
<script>
       var w = 400;
        var h = 200;
        var padding = 30;
        
        
        var dataset = [
                [50, 20], [480, 90], [250, 50], [100, 133], [330, 95],
                [410, 12], [475, 44], [25, 167], [185, 21], [120, 88],[600, 150]
              ];
                
       var xScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[0]; })])
                     .range([padding, w-padding*2]); 
                     
        var yScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[1]; })])
                     .range([h - padding, padding]);

             var svg = d3.select("#container4")
             	      .append("svg")
          			  .attr("width",w)
          			  .attr("height",h);
          			 
	
              	  
          	var circle=svg.selectAll("circle")
          	.data(dataset)
          	.enter()
          	   .append("circle")
			   .attr("cx",function(d){return xScale(d[0])})
			   .attr("cy",function(d){return yScale(d[1])})
			   .attr("r", 5)
			   .attr("fill","teal");
</script>

<p>Теперь все точки на месте и будут отображаться корректно, даже если мы решим изменить размер контейнера.</p>

<p>Осталось совсем немного: нарисуем оси с помощью функции d3.svg.axis(), добавим еще один масштаб для радиусов окружности и поиграемся с цветом. Чтобы оси были тонкие и красивые, добавим немного CSS. Итоговый код страницы будет выглядеть как-то так:</p>

<p><figure class='code'><figcaption><span> (intro_d3_js.html)</span> <a href='/downloads/code/intro_d3_js.html'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>D3 Page<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;d3/d3.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                     <span class="nc">.axis</span> <span class="nt">path</span><span class="o">,</span>
</span><span class='line'>                     <span class="nc">.axis</span> <span class="nt">line</span> <span class="p">{</span>
</span><span class='line'>                                  <span class="n">fill</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>                                  <span class="n">stroke</span><span class="o">:</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'>                                  <span class="n">shape</span><span class="o">-</span><span class="n">rendering</span><span class="o">:</span> <span class="n">crispEdges</span><span class="p">;</span>
</span><span class='line'>                                <span class="p">}</span>
</span><span class='line'>        <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="mi">400</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">h</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">padding</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">svg</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#container&quot;</span><span class="p">)</span>
</span><span class='line'>             <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;svg&quot;</span><span class="p">)</span>
</span><span class='line'>          	 <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="nx">w</span><span class="p">)</span>
</span><span class='line'>          	 <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="nx">h</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">dataset</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">[</span><span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">],</span> <span class="p">[</span><span class="mi">480</span><span class="p">,</span> <span class="mi">90</span><span class="p">],</span> <span class="p">[</span><span class="mi">250</span><span class="p">,</span> <span class="mi">50</span><span class="p">],</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">133</span><span class="p">],</span> <span class="p">[</span><span class="mi">330</span><span class="p">,</span> <span class="mi">95</span><span class="p">],</span>
</span><span class='line'>            <span class="p">[</span><span class="mi">410</span><span class="p">,</span> <span class="mi">12</span><span class="p">],</span> <span class="p">[</span><span class="mi">475</span><span class="p">,</span> <span class="mi">44</span><span class="p">],</span> <span class="p">[</span><span class="mi">25</span><span class="p">,</span> <span class="mi">167</span><span class="p">],</span> <span class="p">[</span><span class="mi">185</span><span class="p">,</span> <span class="mi">21</span><span class="p">],</span> <span class="p">[</span><span class="mi">120</span><span class="p">,</span> <span class="mi">88</span><span class="p">],[</span><span class="mi">600</span><span class="p">,</span> <span class="mi">150</span><span class="p">]</span>
</span><span class='line'>              <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">xScale</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
</span><span class='line'>               <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">dataset</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="p">})])</span>
</span><span class='line'>               <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="nx">padding</span><span class="p">,</span> <span class="nx">w</span><span class="o">-</span><span class="nx">padding</span><span class="o">*</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">yScale</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">dataset</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="p">})])</span>
</span><span class='line'>                 <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="nx">h</span> <span class="o">-</span> <span class="nx">padding</span><span class="p">,</span> <span class="nx">padding</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">rScale</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
</span><span class='line'>               <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">dataset</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="p">})])</span>
</span><span class='line'>               <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">xAxis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">axis</span><span class="p">()</span>
</span><span class='line'>               <span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">xScale</span><span class="p">)</span>
</span><span class='line'>               <span class="p">.</span><span class="nx">orient</span><span class="p">(</span><span class="s2">&quot;bottom&quot;</span><span class="p">)</span>
</span><span class='line'>               <span class="p">.</span><span class="nx">ticks</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">yAxis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">axis</span><span class="p">()</span>
</span><span class='line'>              <span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">yScale</span><span class="p">)</span>
</span><span class='line'>              <span class="p">.</span><span class="nx">orient</span><span class="p">(</span><span class="s2">&quot;left&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="p">.</span><span class="nx">ticks</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">dataset</span><span class="p">)</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">enter</span><span class="p">()</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">xScale</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]);})</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">yScale</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]);})</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">rScale</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]);})</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span> <span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">100</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="s2">&quot;teal&quot;</span><span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="k">return</span> <span class="s2">&quot;orange&quot;</span><span class="p">}});</span>
</span><span class='line'>
</span><span class='line'>		
</span><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;g&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;axis&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span> <span class="s2">&quot;translate(0,&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">h</span> <span class="o">-</span> <span class="nx">padding</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">xAxis</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;g&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;axis&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span> <span class="s2">&quot;translate(&quot;</span> <span class="o">+</span> <span class="nx">padding</span> <span class="o">+</span> <span class="s2">&quot;,0)&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">yAxis</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>А вот и результат наших трудов:</p>

<div id="container5"></div>
<script type="text/javascript">
        
        var w = 400;
        var h = 200;
        var padding = 30;

        
        var svg = d3.select("#container5")
             	      .append("svg")
          			  .attr("width", w)
          			  .attr("height", h);
        
        var dataset = [
                [50, 20], [480, 90], [250, 50], [100, 133], [330, 95],
                [410, 12], [475, 44], [25, 167], [185, 21], [120, 88],[600, 150]
              ];

        
        var xScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[0]; })])
                     .range([padding, w-padding*2]); 
                     
        var yScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[1]; })])
                     .range([h - padding, padding]);
                     
        var rScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[1]; })])
                     .range([2, 5]);  
                     
                                
        var xAxis = d3.svg.axis()
                  .scale(xScale)
                  .orient("bottom")
                  .ticks(5);
                  
         var yAxis = d3.svg.axis()
                  .scale(yScale)
                  .orient("left")
                  .ticks(5);                    
                     
                     
         svg.selectAll("circle")
			   .data(dataset)
			   .enter()
			   .append("circle")
			   .attr("cx", function(d) {return xScale(d[0]);})
			   .attr("cy", function(d) {return yScale(d[1]);})
			   .attr("r", function(d) { return rScale(d[1]);})
			   .attr("fill",function(d){if (d[0]>100) {return "teal"} else {return "orange"}});

		
			svg.append("g")
			    .attr("class", "axis")
			    .attr("transform", "translate(0," + (h - padding) + ")")
                .call(xAxis);  
            svg.append("g")
                .attr("class", "axis")
                .attr("transform", "translate(" + padding + ",0)")
                .call(yAxis);                                 
        
</script>

<h2 id="section-1">Источники для самостоятельного изучения</h2>

<p>В этой статье мы очень поверхностно ознакомились с самыми основными принципами рисования графики с помощью D3.js. Для подробного изучения стоит прочитать несколько книг.</p>

<p>Начинать стоит с книги <strong>Interactive Data Visualization</strong>. Лучше использовать ее <a href="http://chimera.labs.oreilly.com/books/1230000000345/">бесплатную электронную версию</a>, потому что там более актуальный код и есть интерактивные примеры.</p>

<p>Для дальнейшего углубления подойдет <strong>Data Visualization with D3.js Cookbook</strong>. В ней хорошо и подробно описаны фундаментальные принципы работы библиотеки.</p>

<p><img src="/images/bookcover1.jpg" width="302" height="373" title="Interactive Data Visualization" > <img src="/images/bookcover2.png" title="Data Visualization with D3.js Cookbook" ></p>

<p>Помимо книг, есть несколько хороших источников знаний по теме в Интернете:</p>

<ul>
  <li><a href="http://bost.ocks.org/mike/">сайт Майка Бостока</a> — автора библиотеки. Здесь много хороших примеров и просто интересных статей;</li>
  <li><a href="https://github.com/mbostock/d3/wiki">wiki проекта на GitHub</a> — наиболее полное описание всех функций;</li>
  <li><a href="https://www.dashingd3js.com/">Learn how to make Data Visualizations with D3.js</a> — пошаговое руководство для начинающих;</li>
  <li><a href="http://square.github.io/intro-to-d3/">Intro to D3.js</a> — еще одно;</li>
  <li><a href="http://www.d3noob.org/">D3.js Tips &amp; Tricks</a> — здесь встречаются полезные советы и объяснения тонких мест.</li>
</ul>

<p>Единственным полезным источником на русском (помимо нашего блога) являются материалы «Лаборатории данных»:</p>

<ul>
  <li><a href="http://d3-js.ru/mike/join/">«Мыслим связками»</a> — перевод статьи Майка Бостока. Очень полезная статья для понимания связи между данными и представлением в D3;</li>
  <li><a href="http://habrahabr.ru/company/datalaboratory/blog/217905/">Введение в D3</a> на Хабре;</li>
  <li><a href="http://brainwashing.pro/dataviz-online">Онлайн-курс «Визуализация. Основы»</a> включает в себя раздел про D3.</li>
</ul>

]]></content>
  </entry>
  
</feed>
