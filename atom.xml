<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[DataDeep Evil Twin]]></title>
  <link href="http://datadeep.ru/atom.xml" rel="self"/>
  <link href="http://datadeep.ru/"/>
  <updated>2015-09-17T02:16:30+03:00</updated>
  <id>http://datadeep.ru/</id>
  <author>
    <name><![CDATA[Команда datadeep.ru]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ищем темы в Игре Престолов]]></title>
    <link href="http://datadeep.ru/blog/2015/09/13/zim-blizk/"/>
    <updated>2015-09-13T14:54:20+03:00</updated>
    <id>http://datadeep.ru/blog/2015/09/13/zim-blizk</id>
    <content type="html"><![CDATA[<p>Когда мы имеем дело с большим количеством текстовых документов, первое что нас интересует — о чем эти документы: есть ли между ними что-то общее, о чем каждый из документов, о чем они в целом? Попробуем ответить на эти вопросы воспользовавшись инструментарием науки о данных. Да не просто так, а на примере серии книг “Песнь Льда и Пламени”, известной также как “Игра Престолов”.</p>

<p><img src="http://datadeep.ru/images/2015-09_TopicModelling_GameOfThrones/GameOfThrones_tag_cloud.jpg" width="768" height="576" title="КДПВ" /></p>

<!-- more -->

<p>Одно из основных понятий, которое может помочь отметить на заданные вопросы —  <em>тема</em>. Тема — это то, о чем говориться в тексте, например, объект его обсуждения. Разумеется, любой может определить основную тему текста, прочитав его. Однако, есть несколько причин поступить иначе. Во-первых, этот процесс достаточно трудоемкий, особенно если учесть потенциально большие коллекции документов (например, весь интернет). Во-вторых, этот подход субъективный, а хотелось бы получить объективную (а еще лучше, численную) характеристику тематики текста. Наконец, этот блог не о чтении, а об анализе данных. И именно путем анализа данных мы и планируем пойти.</p>

<p>Для ответа на наши вопросы мы воспользуемся таким подходом, как <em>тематическое моделирование</em>. Тематическое моделирование — это подраздел машинного обучения, заключающийся в построении <em>тематической модели</em> по заданному текстовому корпусу. В свою очередь, тематическая модель — это статистическая модель, которая моделирует взаимосвязь наблюдамемых переменных: слов и документов и ненаблюдаемых переменных — тем, отвечая тем самым на два основных вопроса:</p>

<ol>
  <li>Какие слова образуют каждую из тем?</li>
  <li>К каким темам относится каждый из документов?</li>
</ol>

<p>В этой статье мы разберемся в алгоритме LSA — одном из базовых алгоритмов тематического моделирование, а реализуем его на языке Python, а главное — применим его на корпусе, составленном из книг серии “Песнь Льда и Пламени”. Соответственно, статья состоит из трех частей: теории, практики и обсуждения результатов. Первая часть может вызвать приступ “T.L.D.R.”, поэтому если вы знакомы с основами тематического моделирования или же в них не заинтересованы, то можете сразу переходить ко второй части. Если же интересно узнать лишь что получилось — смело прокручивайте до третьей части.</p>

<h1 id="section">Часть 1. Теория</h1>

<p>В это части мы сначала опишем несколько алгоритмов, а затем покажем как объединив их вместе можно получить алгоритм тематического моделирования LSA.</p>

<p>Итак, определившись с тем что мы хотим получить (тематическую модель), остается понять, как же это сделать. Сразу скажу, без математики не обойтись. К сожалению, математике не знакомы понятия “текст”, “документ”, “слово”, “тема” и т.п. Зато, ей хорошо понятен язык чисел и векторов. И именно на язык векторов нам и предстоит перейти для решения нашей задачи. Для этого мы воспользуемся так называемой <em>векторной моделью</em> текста — “переведем” наш корпус с прикладного языка слов и документов на абстрактный язык линейной алгебры.</p>

<h2 id="section-1">Векторная модель</h2>
<p>Векторная модель — модель представления текстовых документов в виде числовых векторов, где каждое размерность вектора-документа соответствует какому-либо слову. Рассмотрим построение этой модели.</p>

<p>На входе мы имеем коллекцию из <script type="math/tex">N</script> документов. Пронумеруем их числами от 1 до <script type="math/tex">N</script>, так что индексом <script type="math/tex">d \in \{1..N\}</script> обозначается <script type="math/tex">d</script>-й элемент коллекции. Далее, рассмотрим словарь слов — все уникальные слова, встречающиеся в наших документах. Допустим, таких слов <script type="math/tex">M</script> штук и пронумеруем их от 1 до <script type="math/tex">M</script> индексом <script type="math/tex">w</script>. Теперь, посчитаем сколько раз каждое слово <script type="math/tex">w=1..M</script> входит входит в каждый документ <script type="math/tex">d=1..N</script> и обозначим это число <script type="math/tex">n_{d,w}</script>. Из этих чисел сформируем матрицу <script type="math/tex">\mathbf{X} = (n_{d,w})_{d,w}</script> — <a href="https://en.wikipedia.org/wiki/Document-term_matrix">матрицу частот слов в документах</a>. Строки этой матрицы соответствуют документам, а столбцы — словам. Скорее всего, эта матрица будет <em>разряженной</em> — большая часть ее элементов будет равна нулю (ведь каждый документ содержит лишь небольшую долю всех слов).</p>

<p>Перевод окончен! Теперь наш текстовый корпус представлен в виде матрицы <script type="math/tex">\mathbf{X}</script>. 
В результате получится матрица выглядящая примерно следующим образом.</p>

<p><img src="http://datadeep.ru/images/2015-09_TopicModelling_GameOfThrones/GameOfThrones_X_matrix_vis.svg" width="384" height="288" title="Матрица документ-слово" /></p>

<p>Стоит заметить, что подобная модель под собой имеет два основных предположения.</p>

<ul>
  <li>Порядок документов в коллекции не имеет значения.</li>
  <li>Порядок слов в документе не имеет значения (т.н. “мешок слов” или “bag of words”).</li>
</ul>

<p>Если первое предположение вполне естественно, то второе может показаться неоднозначным. Казалось, даже такая мелочь, как запятая в предложении “казнить нельзя, помиловать” полностью меняет его смысл, что уж говорить о порядке слов даже не в одном предложении, а в нескольких абзацах. Несмотря на это резонное замечание, модель “мешка слов” — одна из наиболее широко используемых и хорошо зарекомендовавшая себя на практике. Тем более это верно для такой задачи, как определение темы. Действительно, как не расставляй слова и знаки препинания в предложении “казнить, нельзя помиловать”, легко понять что речь идет о казни (“казнить” же или “помиловать” — детали).</p>

<h2 id="section-2">Стемминг</h2>
<p>Далее развивая мысль о значимости тех или иных деталей для определения тематики текста, можно заметить, что слово может встречаться в тексте в различных формах: с различными окончаниями и приставками, — но с единым смыслом. Например, неважно какую форму слова мы встретили в тексте: “казнить”, “казнят”, “казнен”, “казню”, “казнишь”, “казни” — все они относятся к теме “казнь”. Именно на нахождение <a href="https://ru.wikipedia.org/wiki/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D0%B0_%D1%81%D0%BB%D0%BE%D0%B2%D0%B0">основы слова</a> по той или иной заданной его форме и направлен такой инструмент, как <em>стемминг</em>. 
Здесь мы не будем разъяснять, какие бывают алгоритма стемминга (а их довольно много) и как они работают. Если возникнет интерес, можно начать со 
<a href="https://ru.wikipedia.org/wiki/%D0%A1%D1%82%D0%B5%D0%BC%D0%BC%D0%B8%D0%BD%D0%B3">статьи в википедии</a>. Скажем только, что в дальнейшем мы будем использовать <a href="http://snowball.tartarus.org/">стеммер Snowball</a>, а точнее <a href="http://www.nltk.org/_modules/nltk/stem/snowball.html">его реализацию в NLTK</a>.</p>

<p>Имея в руках стеммер, можно использовать его для преобразования каждого слова каждого документа в его нормальную форму. Тем самым мы, во-первых, значительно уменьшим общее число слов, а следовательно и вычислительную трудоемкость, а во-вторых, упростим дальнейшую интерпретацию результатов.</p>

<h2 id="tf-idf">TF-IDF</h2>
<p>TF-IDF — (Term Frequency - Inverse Document Frequency) методика оценки важности слова в документе. Она опирается на два основных предположения</p>

<ol>
  <li>Частота появления слова в документе пропорциональна его важности в этом документе.</li>
  <li>Число документов, в котором встречается слово обратно пропорционально его важности.</li>
</ol>

<p>Первое предположение вполне логично, а если поразмыслить то и с обоснованием второго не возникнет проблем: возьмем, например, “и” или “а” — они наверняка встретятся в большинстве документов, но на вряд ли привносят что-то в их тематику. Другой пример: возьмем текст новостей, посвященных гражданину Н-му. Естественно, 99.9% из них будут содержать его фамилию в той или иной форме, которая в то же время, будет совершенно бесполезна для определение их темы (в контексте общей темы, посвященной этому гражданину).</p>

<p>Эти два предположения TFIDF учитывает с помощью функций  <script type="math/tex">\mathrm{tf}</script> и <script type="math/tex">\mathrm{idf}</script> соответственно. Задаются они следующим образом</p>

<ul>
  <li><script type="math/tex">\mathrm{tf}(w, d) = n_{w, d}</script> — число вхождений слова <script type="math/tex">w</script> в документ <script type="math/tex">d</script>;</li>
  <li><script type="math/tex">\mathrm{idf}(w) = \log \frac{N}{\lvert \{d \; : \; n_{w, d} > 0\} \rvert }</script> — логарифм обратной доли документов, содержащих слово <script type="math/tex">w</script>.</li>
</ul>

<p>Итоговая же оценка важности слова <script type="math/tex">w</script> для документа <script type="math/tex">d</script> описывается функцией <script type="math/tex">\mathrm{tfidf}</script>:</p>

<script type="math/tex; mode=display">\mathrm{tfidf}(w, d) = \mathrm{tf}(w, d) * \mathrm{idf}(w)</script>

<p>Таким образом, меняя <script type="math/tex">\mathbf{X} = (n_{d,w})_{d,w}</script> на матрицу <script type="math/tex">X_{tfidf} = (\mathrm{tfidf}(w, d))_{d, w}</script>, мы понижаем важность слов, встречающихся в большинстве документов и повышаем ее у слов встречающихся в относительно небольшом подмножестве документов.</p>

<h2 id="section-3">Сингулярное разложение</h2>

<p>Потихоньку мы подбираемся к самому интересному. Как же найти ответы на наши вопросы касательно тем?
Напомним, на какие вопросы должна ответить искомая тематическая модель коллекции документов.</p>

<ol>
  <li>Какие слова образуют каждую из тем?</li>
  <li>К каким темам относится каждый из документов?</li>
</ol>

<p>Наша задача — численно ответить на эти вопросы на том же языке, на котором описана матрица документов-слов <script type="math/tex">\mathbf{X}</script>.</p>

<p>Рассмотрим конкретную тему <script type="math/tex">t</script> и ответы на эти вопросы в векторном виде:</p>

<ol>
  <li>Вектор <script type="math/tex">u_t \in \mathrm{R}^{N }</script>, <script type="math/tex">d</script>-й элемент которого <script type="math/tex">u_t^{(d)}</script> символизирует близость темы <script type="math/tex">t</script> документу <script type="math/tex">d</script>.</li>
  <li>Вектор <script type="math/tex">v_t \in \mathrm{R}^{M }</script>, <script type="math/tex">w</script>-й элемент которого <script type="math/tex">v_t^{(w)}</script> символизирует важность слова <script type="math/tex">w</script> для темы <script type="math/tex">t</script>.</li>
</ol>

<p>Заметим, что если слово <script type="math/tex">w</script> важно для темы <script type="math/tex">t</script> (<script type="math/tex">v_t^{(w)}</script> велико), а тема <script type="math/tex">t</script> близка документу <script type="math/tex">d</script> (<script type="math/tex">u_t^{(d)}</script> велико), то велико будет и их произведение: <script type="math/tex">u_t^{(d)} v_t^{(w)}</script>. Если же тема <script type="math/tex">t</script> близка документу <script type="math/tex">d</script>, а слово <script type="math/tex">w</script>, напротив, не играет роли в теме <script type="math/tex">t</script> (<script type="math/tex">v_t^{(w)} \sim 0</script>), то и их произведение будет близко к нулю: <script type="math/tex">u_t^{(d)} v_t^{(w)}\sim 0</script>.   Более того, если перемножить два этих вектора, то получившаяся матрица <script type="math/tex">X_t = u_t v_t^T</script> будет ни чем иным как корпус с единственной темой — темой <script type="math/tex">t</script>.</p>

<p>Развивая эту идею, задачу построения тематической модели можно сформулировать следующим образом: найти комбинацию тем $t=1..K$ и соответствующих им векторов <script type="math/tex">u_t</script> и <script type="math/tex">v_t</script>, таких что их комбинация наилучшим образом описывает исходный корпус <script type="math/tex">\mathbf{X}</script>. “Наилучшим образом” будем понимать в смысле наименьшего квадратичного отклонения:</p>

<script type="math/tex; mode=display">\lvert\lvert X - \sum\limits_{t=1}^K u_t v_t^\top \rvert\rvert_2 \longrightarrow \min\limits_{\{u_t, v_t\}_{t=1}^K}.</script>

<p>Здесь на сцену выходит <em>сингулярное разложение</em> (<em>singular value decomposition</em>, <em>SVD</em>), решающее схожую задачу. Оно заключается в представлении вещественной матрицы <script type="math/tex">X \in \mathrm{R}^{N\times M}</script>, <script type="math/tex">N > M</script> в виде:</p>

<script type="math/tex; mode=display">X = U S V^\top = \sum_{t=1}^{M} s_t u_t v_t^\top,</script>

<p>где <script type="math/tex">U \in \mathrm{R}^{N\times M}</script>, <script type="math/tex">V \in \mathrm{R}^{M\times M}</script> — ортогональные матрицы, состоящие из левых (<script type="math/tex">u_t</script>) и правых (<script type="math/tex">v_t</script>) сингулярных векторов, а <script type="math/tex">S \in \mathrm{R}^{M\times M}</script> — диагональная матрица, на главной диагонали которой находятся сингулярные числа (<script type="math/tex">s_k</script>).</p>

<p>Для наглядности мы проиллюстрировали неполное сингулярное разложение матрицы документ-слово (крестиками обозначены ненулевые значения).</p>

<p><img src="http://datadeep.ru/images/2015-09_TopicModelling_GameOfThrones/GameOfThrones_SVD_vis.svg" width="768" height="576" title="SVD матрицы документ-слово" /></p>

<p>Сингулярное разложение — одно из важнейших матричных разложений, применяемая во множестве как теоретических, так и практических областей: нахождении псевдообратной матрицы, решении линейных уравнений, снижении размерности, анализе временных рядов, рекомендательных системах и др. В качестве отправной точки можно обратится к <a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D0%BD%D0%B3%D1%83%D0%BB%D1%8F%D1%80%D0%BD%D0%BE%D0%B5_%D1%80%D0%B0%D0%B7%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5">википедии</a> или довольно наглядной статье на <a href="http://www.ams.org/samplings/feature-column/fcarc-svd">ams.org</a>.</p>

<p>SVD обладает множеством полезных слов, в контексте нашей задачи определения тем в корпусе нам интересны следующие:</p>

<ol>
  <li>Длинна правых сингулярных векторов равна единице: <script type="math/tex">v_t = 1</script> — это означает, что все вектора тем (<script type="math/tex">v_t</script>) лежат на единичной окружности в пространстве слов, тем самым находясь в едином масштабе, и все что их отличает друг от друга — это “угол поворота” — то какие слова для них более важные, а какие менее;</li>
  <li>Длинна левых сингулярных векторов равна единице: <script type="math/tex">u_t = 1</script> — вектора документов (<script type="math/tex">u_t</script>) лежат на единичной окружности в пространстве тем, аналогично находясь в едином масштабе, и их отличие заключается в пропорциях тех или иных тем;</li>
  <li>Все вектора <script type="math/tex">\{v_t\}</script> ортогональны друг другу — исключена возможность того, что все темы будут друг на друга похожи — в пространстве слов они ортогональны друг другу;</li>
  <li>Сингулярные числа <script type="math/tex">s_t</script> расположены на диагонали матрицы <script type="math/tex">S</script> по убыванию — сперва идут темы обладающие наибольшим вкладом в коллекцию;</li>
  <li>Сингулярные вектора определены с точность до знака: одновременно домножив <script type="math/tex">u_t</script> и $$v_t$ на -1 ничего не изменится — это значит, что у каждой темы есть, фактически два полюса: один описывается словами с наибольшим положительным весом, а другой — с наибольшим отрицательным;</li>
  <li>Если рассмотреть <em>сокращенное сингулярное разложение</em> (<em>truncated SVD</em>): <script type="math/tex">X_K = \sum_{t=1}^{K} s_t u_t v_t^\top</script>, то это будет *наилучшим приближением матрицы <script type="math/tex">X</script> ранга <script type="math/tex">K</script> (в терминах <script type="math/tex">\lvert\lvert.\rvert\rvert_2</script> нормы). Это означает, что любой другой набор из <script type="math/tex">K</script> тем, представленный в виде троек <script type="math/tex">\{u_t, s_t, v_t\}_1^K</script> будет хуже описывать наш исходный корпус.</li>
</ol>

<p>Довольно-таки неплохо! Учитывая, что это достается нам совершенно бесплатно :)</p>

<p>Подытожим. Имея матрицу <script type="math/tex">X</script>, все что нам нужно сделать для получения его тематической модели — это выбрать число <script type="math/tex">% &lt;![CDATA[
K < N, M %]]&gt;</script> и воспользоваться SVD:</p>

<script type="math/tex; mode=display">U_K, S_K, V^\top_K = \mathrm{svd}(X, K)</script>

<p>и тогда каждую тройку <script type="math/tex">u_k, s_k, v_k</script> можно будет интерпретировать следующим образом:</p>

<ul>
  <li><script type="math/tex">u_t \in \mathrm{R}^{N}</script> — вектор соответствия темы <script type="math/tex">t</script> каждому из документов <script type="math/tex">d=1..N</script>, чем больше <script type="math/tex">u_t^{(d)}</script> — тем ближе документ <script type="math/tex">d</script> к теме <script type="math/tex">t</script>;</li>
  <li><script type="math/tex">v_t \in \mathrm{R}^{M}</script> — вектор соответствия слов <script type="math/tex">w=1..M</script> теме <script type="math/tex">t</script>, чем больше <script type="math/tex">v_t^{(w)}</script> — тем важнее слово <script type="math/tex">w</script> в теме <script type="math/tex">t</script>;</li>
  <li><script type="math/tex">s_t \in \mathrm{R}</script> — относительный вес темы <script type="math/tex">t</script> в корпусе.</li>
</ul>

<p>Стоит отметить, что согласно пятому свойству, “больше” стоит понимать в абсолютном смысле, ведть большое отрицательно число можно легко превратить в большое положительно, домножив соответствующие вектора <script type="math/tex">u_t, v_t</script> на -1.</p>

<h2 id="section-4">Латентный Семантический Анализ</h2>

<p>На этом с математикой покончено! Осталось собрать элементы мозайки воедино.</p>

<p>Латентный семантический анализ фактически является комбинацией описанных ваше методов. Кратко алгоритм его можно описать следющим образом.</p>

<ol>
  <li>На входе LSA поступает коллекция текстовых документов.</li>
  <li>Текстовые документы переводятся в матрицу частот слов в документах <script type="math/tex">X</script> посредством векторной модели.</li>
  <li>Элементы матрицы <script type="math/tex">X</script> взвешиваются посредством TF-IDF: <script type="math/tex">X_{tfidf} = \mathrm{tfidf}(X)</script>.</li>
  <li>К взвешенной матрице применяется SVD: <script type="math/tex">U_K, S_K, V^\top_K = \mathrm{svd}(X_{tfidf}, K)</script>.</li>
  <li>Полученные тройки <script type="math/tex">u_t, s_t, v_t</script> используются для интерпретаций тем <script type="math/tex">t=1..K</script>.</li>
</ol>

<p>Как видно, среди этапов алгоритма отсутствует стемминг. Тем не менее, эта операция является де-факто стандартом в задачах тематического моделирования и его мы добавили по собственной инициативе в следующем разделе (можно рассмотреть его в качестве шага алгоритма под номером <script type="math/tex">\frac{1}{2}</script>).</p>

<p>На этом с теорией наконец-то покончено, перейдем к практике!</p>

<h1 id="section-5">Часть 2. Практика</h1>

<p>С чего начать? С получения данных, конечно! Нам нужен текст Игры Престолов, желательно всех вышедших книг. Есть различные схемы, в том числе черные и серые, но есть и белые. На правах рекламы, мы воспользовались совершенно белым предложением интернет-магазина litres.ru, где можно приобрести всю серию по <a href="http://www.litres.ru/serii-knig/pesn-lda-i-ognya/elektronnie-knigi/">довольно привлекательной цене</a> — после этого все книги будут доступны в множестве форматов, в том числе и предпочтительным для нас txt.</p>

<p>Когда книги скачены, можно перейти первому этапу — предобработке данных</p>

<h2 id="section-6">Предобработка данных</h2>

<p>Сначала, разберем текст книг по главам и посмотрим на их размер по числу слов.</p>

<p>На примере первой книги “Игры Престолов”:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Игра_Престолов</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">0. Пролог 2925
</span><span class="line">1. Бран 2295
</span><span class="line">2. Кейтилин 1643
</span><span class="line">3. Дейенерис 3284
</span><span class="line">4. Эддард 3068
</span><span class="line">...
</span><span class="line">68. Дейенерис 3273
</span><span class="line">69. Тирион 2738
</span><span class="line">70. Джон 3909
</span><span class="line">71. Кейтилин 3641
</span><span class="line">72. Дейенерис 2738
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>и последней на данный момент книге серии — 2-го тома “Танца с Драконами”:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Танец_с_Драконами_2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">0. Принц Винтерфелла 4564
</span><span class="line">1. Страж 3891
</span><span class="line">2. Джон 2532
</span><span class="line">3. Тирион 3033
</span><span class="line">4. Переметчивый 3441
</span><span class="line">...
</span><span class="line">31. Укротитель драконов 2584
</span><span class="line">32. Джон 3897
</span><span class="line">33. Десница королевы 4106
</span><span class="line">34. Дейенерис 3775
</span><span class="line">35. Эпилог 4518
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Судя по списку глав все верно, идем дальше. Посмотрим на сам текст — возьмем на вскидку несколько абзацев (точнее, блоков текста, разделенных переносом строки):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Пример блоков текста</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">Оша поглядела на него.
</span><span class="line">------------------------------
</span><span class="line">– И ты ее ненавидишь?
</span><span class="line">------------------------------
</span><span class="line">– Н-но вы проповедуете материнское милосердие…
</span><span class="line">------------------------------
</span><span class="line">Все хорошо, Грейджой. Слышишь, какая тишь? Тебе бы прыгать от радости. Ты взял Винтерфелл меньше чем с тридцатью людьми – такой подвиг достоин песен. Сейчас он вернется в постель, перевернет Киру на спину и возьмет ее снова, чтобы прогнать призраки. Ее вздохи и смешки рассеют застывшую тишину.
</span><span class="line">------------------------------
</span><span class="line">– Это ваш долг.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Как видно, здесь есть как довольно осмысленные абзацы, но много и обрывок фраз, вырванных из контекста. Вряд ли, например, фраза “Оша поглядела на него” полезна для определение темы. Эту проблему недостатка контекста мы решим просто: объединим каждые три последующих текстовых блока вместе:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Пример объединенных блоков текста</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">Оша поглядела на него.
</span><span class="line">– Ты просил, и они ответили. Открой уши, прислушайся, сам услышишь.
</span><span class="line">Бран прислушался.
</span><span class="line">------------------------------
</span><span class="line">– И ты ее ненавидишь?
</span><span class="line">– Почти так же сильно, как люблю. Прошу извинить меня, моя королева, – я очень устал.
</span><span class="line">Дени отпустила его, но, когда он уже собрался выйти, она не удержалась и спросила:
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>— уже лучше! Теперь все готово: мы преобразовали исходные тексты в “документы” — объединенные блоки текста. Можно применять LSA.</p>

<h2 id="section-7">Перевод в векторную модель</h2>
<p>Как мы помним, первый этап LSA — перевод документов векторную модель. 
Начнем с разбиения наших документов на слова и их стемминг</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Разбиение документов на слова</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">re</span>
</span><span class="line"><span class="n">non_letter_rgxp</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">u&#39;[^а-яА-Я ]&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">fix_doc</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">doc</span><span class="p">:</span> <span class="n">non_letter_rgxp</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">,</span> <span class="n">doc</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">nltk</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">nltk.stem.snowball</span> <span class="kn">import</span> <span class="n">SnowballStemmer</span>
</span><span class="line">
</span><span class="line"><span class="n">stemmer</span> <span class="o">=</span> <span class="n">SnowballStemmer</span><span class="p">(</span><span class="s">&quot;russian&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">stem</span><span class="p">(</span><span class="n">tokens</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="n">stemmer</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tokens</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">docs_tokens</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">    <span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">w</span><span class="p">:</span> <span class="n">w</span><span class="p">,</span> <span class="n">stem</span><span class="p">(</span><span class="n">remove_non_letters</span><span class="p">(</span><span class="n">doc</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">))))</span>
</span><span class="line">    <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">docs</span>
</span><span class="line"><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Теперь, посчитаем частоту слов</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Подсчет частоты слов</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">collections</span>
</span><span class="line">
</span><span class="line"><span class="n">token_frequency_dict</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="k">for</span> <span class="n">tokens</span> <span class="ow">in</span> <span class="n">docs_tokens</span><span class="p">:</span>
</span><span class="line">    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tokens</span><span class="p">:</span>
</span><span class="line">        <span class="n">token_frequency_dict</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Взглянем на наиболее часто встречающиеся слова</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Самые частые слова</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">400392 и
</span><span class="line">271847 он
</span><span class="line">261481 не
</span><span class="line">239817 в
</span><span class="line">187947 на
</span><span class="line">134724 с
</span><span class="line">129038 что
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>.., и на самые редкие</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Самые редкие слова</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">3 линнистер
</span><span class="line">3 близя
</span><span class="line">3 персонаж
</span><span class="line">3 нервнич
</span><span class="line">3 свежеоперен
</span><span class="line">3 прожиг
</span><span class="line">3 долженствова
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Как видно, среди часто встречающихся слов довольно много бессмысленных “коротышек”: “а”, “и”, “не” и т.п. От редких же слов больше вреда, чем пользы: они раздувают словарь слов (а значит и размерность будущей матрицы <script type="math/tex">X</script>, делая вычисления более сложными), а в определении темы вряд ли помогут, так как встречаются в считанном числе документов.</p>

<p>Решено! Отфильтруем самые редкие слова, а так же слова маленькой длинны:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Фильтрация корпуса по словам</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">docs_tokens_filtered</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">    <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">t</span><span class="p">:</span> <span class="n">token_frequency_dict</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="n">tokens</span><span class="p">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">tokens</span> <span class="ow">in</span> <span class="n">docs_tokens</span>
</span><span class="line"><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Остается перевести наши разбитые на слова и отфильтрованные документы в векторный вид. Следующий блок кода делает именно это.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Перевод текстовых документов в матрицу частот документ-слов</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">itertools</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">scipy</span> <span class="kn">as</span> <span class="nn">sp</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">flatten</span><span class="p">(</span><span class="n">iterators_iterator</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">itertools</span><span class="o">.</span><span class="n">chain</span><span class="o">.</span><span class="n">from_iterable</span><span class="p">(</span><span class="n">iterators_iterator</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">all_tokens</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">flatten</span><span class="p">(</span><span class="n">paragraphs_tokens_filtered</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">id_token_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">enumerate</span><span class="p">(</span><span class="n">all_tokens</span><span class="p">))</span>
</span><span class="line"><span class="n">token_id_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(((</span><span class="n">v</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">id_token_dict</span><span class="o">.</span><span class="n">items</span><span class="p">()))</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">doc2vec</span><span class="p">(</span><span class="n">doc_tokens</span><span class="p">,</span> <span class="n">token_id_dict</span><span class="p">):</span>
</span><span class="line">    <span class="n">id_cnt_dict</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">((</span><span class="n">token_id_dict</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">doc_tokens</span><span class="p">))</span>
</span><span class="line">    <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="n">id_cnt_dict</span><span class="o">.</span><span class="n">items</span><span class="p">())</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">docs2csr_matrix</span><span class="p">(</span><span class="n">docs_tokens</span><span class="p">,</span> <span class="n">token_id_dict</span><span class="p">):</span>
</span><span class="line">    <span class="n">docs_vecs</span> <span class="o">=</span> <span class="p">[</span><span class="n">doc2vec</span><span class="p">(</span><span class="n">doc_tokens</span><span class="p">,</span> <span class="n">token_id_dict</span><span class="p">)</span> <span class="k">for</span> <span class="n">doc_tokens</span> <span class="ow">in</span> <span class="n">docs_tokens</span><span class="p">]</span>
</span><span class="line">    <span class="n">data</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">flatten</span><span class="p">((((</span><span class="n">id_cnt</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">id_cnt</span> <span class="ow">in</span> <span class="n">doc_vec</span><span class="p">)</span> <span class="k">for</span> <span class="n">doc_vec</span> <span class="ow">in</span> <span class="n">docs_vecs</span><span class="p">))))</span>
</span><span class="line">    <span class="n">row_ind</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">flatten</span><span class="p">((((</span><span class="n">doc_ind</span> <span class="k">for</span> <span class="n">id_cnt</span> <span class="ow">in</span> <span class="n">doc_vec</span><span class="p">)</span> <span class="k">for</span> <span class="n">doc_ind</span><span class="p">,</span> <span class="n">doc_vec</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">docs_vecs</span><span class="p">)))))</span>
</span><span class="line">    <span class="n">col_ind</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">flatten</span><span class="p">((((</span><span class="n">id_cnt</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">id_cnt</span> <span class="ow">in</span> <span class="n">doc_vec</span><span class="p">)</span> <span class="k">for</span> <span class="n">doc_vec</span> <span class="ow">in</span> <span class="n">docs_vecs</span><span class="p">))))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">sp</span><span class="o">.</span><span class="n">sparse</span><span class="o">.</span><span class="n">csr_matrix</span><span class="p">((</span><span class="n">data</span><span class="p">,</span> <span class="p">(</span><span class="n">row_ind</span><span class="p">,</span> <span class="n">col_ind</span><span class="p">)),</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">X</span> <span class="o">=</span> <span class="n">docs2csr_matrix</span><span class="p">(</span><span class="n">docs_tokens_filtered</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ура, мы в векторе! Получилась матрица 48977 на 27673, идем дальше.</p>

<h2 id="tfidf">TFIDF</h2>
<p>Следующим по списку стоит TFIDF. Воспользуемся собственной реализацией.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>TFIDF</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">tfidf</span><span class="p">(</span><span class="n">X</span><span class="p">):</span>
</span><span class="line">    <span class="n">idf</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">((</span><span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mf">1.</span> <span class="o">/</span> <span class="p">((</span><span class="n">X</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mf">1.</span>
</span><span class="line">    <span class="n">idf</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">sparse</span><span class="o">.</span><span class="n">spdiags</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">idf</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span> <span class="n">diags</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">m</span><span class="o">=</span><span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">n</span><span class="o">=</span><span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">X</span> <span class="o">*</span> <span class="n">idf</span>
</span><span class="line">
</span><span class="line"><span class="n">X_tfidf</span> <span class="o">=</span> <span class="n">tfidf</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="svd">Применение SVD</h2>
<p>На этот раз свой велосипед писать не будем, воспользуемся готовой реализацией для разряженных матриц (а нас как-раз такая) из пакета <a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.svds.html">scipy</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>SVD</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">U</span><span class="p">,</span> <span class="n">S</span><span class="p">,</span> <span class="n">VT</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">sparse</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">svds</span><span class="p">(</span><span class="n">X_tfidf</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="mi">40</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Вот и все, готово! Давайте посмотрим, какие темы нашел LSA.</p>

<h1 id="section-8">Часть 3. Результаты</h1>

<p>Взглянем на сингулярные числа <script type="math/tex">s_t</script> соответствующую вкладу каждой тему в коллекцию</p>

<p><img src="http://datadeep.ru/images/2015-09_TopicModelling_GameOfThrones/GameOfThrones_singular_values_histogram.png" width="768" height="576" /></p>

<p>Первое собственное число всех стоит одинокой башней. Неужели есть какая-та настолько “выдающаяся” тема?<br />
Как мы говорили выше, элементы вектора <script type="math/tex">v_t</script> соответствуют вкладу соответствующих слов в тему <script type="math/tex">t</script>. Посмотрим же на самые большие по модулю элементы вектора <script type="math/tex">v_0</script>. А для наглядности  рядом с каждым значением припишем соответствующее слово, представив их в формате “вес”*“слово”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Первый правый собственный вектор</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">Тема №1: +0.268*что +0.224*как +0.196*был +0.173*сво +0.147*лорд +0.145*так +0.131*все +0.125*когд +0.115*сир +0.102*сказа +0.099*чтоб +0.097*есл +0.095*котор +0.095*сам +0.094*друг +0.093*джон +0.089*корол +0.089*рук +0.089*тольк +0.086*больш
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Удивительно, что все элементы одного знака (мы все-все проверили). Получается такая тема, которой соответствуют все слова без исключения. Но если подумать, то ничего удивительного в этом нет. Вспомним базовую статистику. Если взять множество чисел, какое число будет минимизировать сумму квадратов расстояний от них? Правильно — их среднее. И здесь та же история: фактически, вектор <script type="math/tex">v_0</script> — это среднее по строкам матрицы <script type="math/tex">X_{tfidf}</script>, то есть вектор средних весов слов в нашем корпусе. Исходя из этого, первая собственная тройка с точки зрения определения темы нам мало полезна, так что отбросим ее и вновь взглянем на график собственных чисел.</p>

<p><img src="http://datadeep.ru/images/2015-09_TopicModelling_GameOfThrones/GameOfThrones_singular_values_histogram_without_1st.png" width="768" height="576" /></p>

<p>Теперь сильно выделяющихся тем нет. Далее пойдем по порядку, рассмотрим слова, образующие темы со 2-й по 7-ю.</p>

<h3 id="section-9">Тема 2. “Власть?”</h3>

<p><img src="http://datadeep.ru/images/2015-09_TopicModelling_GameOfThrones/RobertBaratheon_in_Winterfell.jpg" width="768" height="576" title="Старки встречают Роберта Баратеона" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Наиболее важные слова 2-ой темы</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">Тема №2: +0.27*лорд -0.23*джон +0.15*корол +0.15*ваш -0.15*стен +0.15*сир +0.14*что -0.13*черн +0.13*мне +0.12*мен -0.12*бран -0.11*сэм +0.11*есл -0.10*был -0.10*дерев +0.10*роберт -0.09*под +0.09*теб -0.08*ног -0.08*ден
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Похоже, что Джон — самый “важный” герой серии, во всяком случае с точки зрения LSA :). 
Вторую тему можно интерпретировать двумя способами. Во-первых, эта тема посвящена властьимущим: лордам, королям, сирам, — об этом говорят и местоимения “ваш”, “мне”, “мен”. Если 
взглянуть на <a href="https://gist.github.com/Obus/e7cf9223fa7bdc4cda5f">самые близкие к этой теме документы</a> (близость к документа к теме определяется на основе матрицы <script type="math/tex">US</script>), то можно заметить, что ближе всего к этой теме относятся документы, в которой речь идет о лордах: Ренли и Станисе Баратеонах, лорде Тайвине, лорде-главнокомандующем, об общем лорде-отце, о бесчисленных лордах меньшего размаха, или же  чем-нибудь королевском, например, о короле Роберте, короле Станнисе, королевской деснице, королевской гвардии, и даже о Королевском лесе. Во-вторых, если рассмотреть эту тему “наоборот”, домножив вектора <script type="math/tex">u_2</script> и <script type="math/tex">v_2</script> на -1 (пользуемся свойством SVD номер 5), то ее можно интерпретировать как тему анархии. Так среди соответствующих ей <a href="https://gist.github.com/Obus/ead759846f8a69d51854">документов</a> можно встретить множество относящихся к проделкам Арьи Старк и похождениям Джона Сноу с одичалыми.</p>

<h3 id="section-10">Тема 3. “Джон Сноу и его друзья?”</h3>

<p><img src="http://datadeep.ru/images/2015-09_TopicModelling_GameOfThrones/JonSnow_NW_trainee.jpg" width="768" height="576" title="Джон Сноу, тренировка в Ночном Дозоре" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Наиболее важные слова 3-ей темы</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">Тема №3: +0.38*джон -0.32*сир +0.23*сэм +0.22*что +0.15*теб -0.15*ден -0.15*рыцар +0.15*бран -0.13*тирион -0.12*золот +0.11*мне -0.10*джейм +0.09*так -0.09*меч +0.09*есл -0.09*красн +0.09*одичал +0.08*мен +0.08*дозор +0.08*мейстер
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Третья тема вполне очевидная: она посвящена Джону Сноу, по большей части эпизодам с участием Сэма Тарли, в чем можно убедиться взглянув на <a href="https://gist.github.com/Obus/53fea013e8a368fd94cd">ее документы</a>.
Большой отрицательный вес у слова “сир” легко объясним: к кому в ночном дозоре можно так обратиться?</p>

<p>Взглянем на следующую тему</p>

<h3 id="section-11">Тема 4. “Северные Лорды”? или “Матерь Драконов”</h3>

<p><img src="http://datadeep.ru/images/2015-09_TopicModelling_GameOfThrones/RobbSark_Whispering_Wood_Crop2.png" width="384" height="256" title="Северные Лорды" />
<img src="http://datadeep.ru/images/2015-09_TopicModelling_GameOfThrones/MotherOfDragons.jpg" width="384" height="256" title="Матерь Драконов" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Наиболее важные слова 4-ой темы</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">Тема №4: +0.41*лорд -0.31*ден +0.30*джон -0.20*что +0.18*сир -0.15*дракон -0.14*теб -0.12*так +0.12*робб +0.11*корол -0.11*кхал -0.11*мне -0.10*мен -0.10*дрог +0.10*кейтилин -0.10*как +0.09*стен +0.09*старк +0.08*меч +0.07*станнис
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>— вновь о Джоне! На этот раз, в отличие от второй темы, “джон” не противопоставляется “лорду”. Наоборот, <a href="https://gist.github.com/Obus/d1bf933cf83323bab21a">документы относящиеся к этой теме</a> довольно часто описывают либо эпизоды из жизни лордов: лорда главнокомандующего, Робба Старка в окружении северных лордов и прочих. Примечательно, что Дейнерис (“ден”) в этой теме находится в “противоположном углу” этой темы — лордов в ее окружении совсем немного. <a href="https://gist.github.com/Obus/b137a78c9b876759f3bc">Документы противоположного угла</a> целиком посвящены Дейнерис: здесь и “дракон”ы и “кхал” и “дрог”о. Особенно превалирует тема драконов.</p>

<p>На очереди 5-я тема</p>

<h3 id="section-12">Тема 5. “Винтерфелл” или “Джон и Сэм”</h3>

<p><img src="http://datadeep.ru/images/2015-09_TopicModelling_GameOfThrones/game-of-thrones-starks-in-winterfell.png" width="768" height="576" title="Старки в Винтерфелле" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Наиболее важные слова 5-ой темы</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">Тема №5: -0.55*бран -0.31*ходор +0.28*джон +0.19*сэм -0.16*робб -0.15*санс -0.13*был +0.10*станнис +0.10*давос -0.10*кейтилин -0.09*лет -0.09*винтерфелл +0.08*дракон -0.08*что +0.08*корабл +0.08*одичал -0.08*рикон -0.08*волк +0.07*черн -0.07*лювин
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Эту тему так же можно интерпретировать двояко. Один из полюсов - это полюс Винтерфелла: “бран”, “ходор”, “робб”, “санс”, “кейтилин” и другие — это указывает на события происходящие в замке еще до начала войны. С другой стороны, нельзя не отметить, что пара “бран” и “ходор” превалируют: если вглянуть на <a href="https://gist.github.com/Obus/ff4f142a39ea5d18f2f1">документы этого полюса</a>, то можно убедиться что среди них довольно много относящихся к путешествию Брана и Ходора за стену.  На другом полюсе это еще одна тема “посвященная” Сэму Тарли и Джону Сноу. От третьей темы ее отличает отрицание всего что связано с Винтерфеллом: слов “бран”, “робб”, “санс”, “кейтилин”, “винтерфелл” и др., при этом ориентированность на событиям после победы над одичалыми: на то указывают слова “станнис” и “давос”. Документы этого полюса доступны по <a href="https://gist.github.com/Obus/6863dd57ccd7ba245017">ссылке</a>.</p>

<h3 id="section-13">Тема 6. “Боевая”</h3>

<p><img src="http://datadeep.ru/images/2015-09_TopicModelling_GameOfThrones/Aria_vs_Sirio.jpeg" width="768" height="576" title="Учебный поединок Арьи Старк с Сирио Форелем" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Наиболее важные слова 6-ой темы</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">Тема №6: -0.25*тирион -0.23*сир -0.18*джон +0.18*лорд -0.18*рук -0.16*меч -0.16*санс +0.15*ден +0.15*дракон +0.15*давос -0.15*теб -0.14*джейм +0.14*бран +0.12*мор +0.12*корол -0.12*сэм +0.11*корабл -0.11*удар +0.10*станнис +0.09*бог
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>В этой теме наиболее интересна ее “обратная сторона” (полученная умножением на единицу). Здесь превалируют такие слова, как “тирион”, “сир”, “джон”, “рук”, “меч” и т.д. Если взглянуть на соответствующие ей <a href="https://gist.github.com/Obus/0fab1293f682d800e9e2">документы</a>, то окажется что эта тема боя, поединок: в нее попадает сражение от лица Тириона на Черноводной, битва Сэма с мертвым Малышом Паулом, поединок между Бронном и сиром Вардисом Игеном в Орлином Гнезде, бой Джона Сноу с Костяным Лордом и многие другие. Таким образом, ключевыми здесь оказываются слова “рук”, “меч”, “удар” и т.п., а веса отдельных персонажей лишь указывают на их участие в сражениях.</p>

<p>И наконец, 7-я тема</p>

<h3 id="section-14">Тема 7. “Битва при Черноводной” или “Джон Сноу и Дейнерис Таргириен?”</h3>

<p><img src="http://datadeep.ru/images/2015-09_TopicModelling_GameOfThrones/TIrion_Blackwater_Angry.jpg" width="768" height="576" title="Тирион в битве при Черноводной" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Наиболее важные слова 7-ой темы</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">Тема №7: -0.35*ден -0.32*джон +0.29*тирион -0.25*сир +0.17*давос -0.17*кхал -0.15*дрог +0.15*как +0.13*корабл -0.10*ваш -0.10*брат +0.10*лорд -0.10*корол -0.10*бран +0.10*сэм -0.09*джор -0.09*нед -0.09*дракон +0.09*вод -0.08*был
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>С одной стороны, эта тема — еще одна тема касающаяся сражения, но теперь вполне конкретного: битвы при Черноводной. Об этом можно догадаться взглянув на основны слова: “тирион” (со стороны обороняющихся), “давос” (со стороны нападавших), “корабль” и “вод”. Совсем очевидно это становиться, если посмотреть на <a href="https://gist.github.com/Obus/f3b80aa271a46cafb044">соответствующие этой “стороне” темы документы</a> — все они относятся к битве у Черноводной.</p>

<p>Если посмотреть с другой стороны, то это довольно таки загадочная тема, которую попалам делят Джон Сноу и Дейнерис Таргариен: с одной стороны здесь “ден”, “кхал” и “дрого”, а с другой “джон”, “бран” и “нед”. Если взглянуть на <a href="https://gist.github.com/Obus/c615dc92dc99c350ec1c">соответствующие документы</a>, то можно заметить, что практически все они содержат слово “сир”: что со стороны Дейнерис, что со стороны Джона, а так же часто общим является слово “брат”: на севере братьев не счесть, а на юге это брат Дейнерис — пока еще живой Визерис.</p>

<h1 id="section-15">Заключение</h1>

<p>Если вас заинтересовал тема тем (прошу прощения за дурной каламбур) в Игре Престолов, то по <a href="https://gist.github.com/Obus/a6b40e31e9a9535eb757">ссылке</a> доступны по 20 наиболее важных тем для первых 42 тем. Если же хочется поиграться с темами самостоятельно, то в качестве отправных точек могу посоветовать следующее</p>

<ol>
  <li><a href="не готово еще">IPython Notebook</a> с кодом, используемым в этой статье, и полученными результатами.</li>
  <li>Python пакет <a href="https://radimrehurek.com/gensim/">gensim</a>, содержащий как вспомогательный инструменты для создания корпуса, реализацию LSA, так и реализации гораздо более сложных, но и интересных методов тематического моделирования</li>
  <li><a href="http://www.machinelearning.ru/wiki/index.php?title=%D0%A2%D0%B5%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5_%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">Статья</a> на machinelearning.ru</li>
</ol>

<p>Надеюсь, что было интересно :)</p>

<p>До встречи!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Многообразие визуализаций]]></title>
    <link href="http://datadeep.ru/blog/2015/09/01/mnoghoobraziie-vizualizatsii/"/>
    <updated>2015-09-01T20:52:27+03:00</updated>
    <id>http://datadeep.ru/blog/2015/09/01/mnoghoobraziie-vizualizatsii</id>
    <content type="html"><![CDATA[<div>
  <style type="text/css">

    ul{margin:1em 0 1em 2em;}
    ol{margin:1em 0 1em 2em;}

  </style>
</div>

<p>Визуализация является важной частью Data Science, представляя собой удобный интерфейс между данными и человеком. Но различные ее виды встречаются не только в науке о данных. Чтобы обозначить контекст, в котором существует визуализация <em>данных</em>, я покажу разнообразие жанров визуализации <em>вообще</em>, забираясь в миры естественных наук и даже искусства.</p>

<p><img src="http://datadeep.ru/images/teaser.png" width="768" height="576" title="Иллюстрации из книги Эрнста Геккеля &#34;Красота форм в морских глубинах&#34;" alt="Иллюстрации из книги Эрнста Геккеля &#34;Красота форм в морских глубинах&#34;" /></p>

<!-- more -->

<p>В пайплайне науки о данных визуализация встречается преимущественно в двух ситуациях: для первичного анализа данных и для представления полученных результатов после окончания работы.</p>

<p>В связи с этим существует условное деление графики на исследовательскую (exploratory) и презентационую (explanatory).
Первая должна помогать в работе, вторая – нести внятное сообщение.</p>

<p>Такое деление достаточно грубое и в жизни чаще встречаются промежуточные варианты.
Для нас важно то, что у этих видов графики различные цели.
От целей мы и будем отталкиваться в разговоре о многообразии. Я рассмотрю следующие жанры:</p>

<ul>
  <li>Научная визуализация;</li>
  <li>Исследовательская графика;</li>
  <li>Аналитическая графика;</li>
  <li>Презентационная графика;</li>
  <li>Инфографика;</li>
  <li>Скетч;</li>
  <li>Data art.</li>
</ul>

<h2 id="section">Научная визуализация</h2>

<p>Визуализация в науке нужна для иллюстрации и интерпретации научных результатов.
Она помогает показать то, что иначе невозможно, либо очень сложно увидеть.</p>

<p>Это может быть что-то слишком большое (карта мира) или что-то слишком маленькое (модель атома), то, что невозможно увидеть (инфракрасное излучение, биополе:))) или что сложно достать (человеческие органы).
Визуализироваться могут этапы временного развития (развитие эмбриона) или коллекция  образцов, собранная в разных точках Земли. 
С помощью графического отображения можно упорядочить элементы реального мира или изобразить что-то, в природе не встречающееся (результаты компьютерного моделирования, математические объекты).</p>

<p>Стоит заметить, что картинки сильно различаются в зависимости от специфики научной области и задачи. Посмотрим на некоторые примеры из различных наук.</p>

<p><strong>Медицина</strong></p>

<p><img src="http://datadeep.ru/images/Medical.png" title="Снимок УЗИ. Рисунок Леонардо да Винчи. Компьютерная модель сердца" /></p>

<p><strong>География</strong></p>

<p><img src="http://datadeep.ru/images/Geographic.png" title="Карты: геологическая, географическая и политическая" /></p>

<p><strong>Астрономия</strong></p>

<p><img src="http://datadeep.ru/images/Astronomy.png" title="Зарисовки пятен на Солнце. Фотография Вселенной" /></p>

<p><strong>Химия</strong></p>

<p><img src="http://datadeep.ru/images/Chemistry.png" title="Модель молекулы ДНК. Таблица Менделеева" /></p>

<p><strong>Физика</strong></p>

<p><img src="http://datadeep.ru/images/Physics.png" title="Симуляция смешивания жидкостей. Использование визуалицации в самолетосторении" /></p>

<p><strong>Математика</strong></p>

<p><img src="http://datadeep.ru/images/Math.png" title="Архимед чертит геометрические фигуры на песке. Компьютерная визуализация аттрактора Лоренца" /></p>

<p>Как видно из этих иллюстраций, с течением времени меняются методы и возможности графического отображения. 
Этот вид визуализации появился одним из первых и всегда находится на переднем краю технологического прогресса.</p>

<p>Подробнее об актуальных направлениях можно почитать в <a href="http://en.wikipedia.org/wiki/Scientific_visualization">статье на Википедии</a> (русскоязычная версия отсутствует). На русском можно почитать материалы конференции <a href="http://www.graphicon.ru">Графикон</a> и журнал <a href="http://sv-journal.org">“Научная визуализация”</a>.</p>

<h2 id="section-1">Исследовательская (разведочная) графика</h2>

<p>Если до этого мы говорили о естественных науках и чистой математике, то теперь вернемся к тематике нашего блога и обратимся к науке о данных. Для начала рассмотрим примеры визуализаций, создаваемых на этапе исследования данных. Они делаются для персонального использования и нужны в первую очередь для анализа.</p>

<p>Этот этап по английски называется exploratory data analysis, в русскоязычной литературе встречаются термины “описательная статистка” и  “разведочный анализ данных”. Понятие ввел Дж. Тьюки в своей книге “Анализ результатов наблюдений”, в основу которой положен принцип:</p>

<blockquote>
  <p>“Важно понять, что́ вы можете делать, прежде чем вы научитесь измерять, насколько хорошо вы это сделали.”</p>
</blockquote>

<p>Книга написана в 1977 году  и изложенные в ней методы уже не актуальны. Основными инструментами ему служили математические таблицы, логарифмическая линейка, миллиметровка и калька. Но принципы построения полезных графиков с тех пор не изменились. Вот еще одна важная цитата из книги:</p>

<blockquote>
  <p>“Графики, подчеркивающие лишь то, что нам уже известно, нередко не стоят места, которое они занимают. Графики, которые надо рассматривать с лупой, чтобы увидеть в них главное, заставляют нас тратить понапрасну время и мало полезны. График имеет наибольшую ценность тогда, когда он <em>вынуждает</em> нас заметить то, что мы совсем не ожидали увидеть.”</p>
</blockquote>

<p>Разведочный анализ — фундамент исследования данных. Графики на этом этапе позволяют решать следующие задачи:</p>

<ul>
  <li>понять свойства данных;</li>
  <li>выявить ошибки;</li>
  <li>определить взаимосвязи между переменными;</li>
  <li>обнаружить закономерности;</li>
  <li>предложить стратегии моделирования.</li>
</ul>

<p>Такие графики делаются быстро и в большом количестве. При этом не уделяется внимание легенде, осям, цветам и прочим элементам оформления.
	    Рассмотрим несколько примеров.</p>

<p>Пример 1: иногда визуальная оценка позволяет найти ошибки кластеризации и помогает подобрать правильный алгоритм.</p>

<p><img src="http://datadeep.ru/images/explore-2.png" /></p>

<p>Пример 2: визуализация при исследовании регрессии – иллюстрация <a href="https://ru.wikipedia.org/wiki/Парадокс_Симпсона">парадокса Симпсона</a>.</p>

<p><img src="http://datadeep.ru/images/explore-1.png" /></p>

<p>Пример 3: построение гистограмм для различных признаков – один из шагов в первичном исследовании данных.</p>

<p><img src="http://datadeep.ru/images/hist.png" /></p>

<p>Пример 4: график поведения функции потерь помогает выбрать оптимальное значение параметра алгоритма обучения с учителем</p>

<p><img src="http://datadeep.ru/images/nn_epochs.jpg" /></p>

<p>В следующих статьях мы подробнее рассмотрим инструменты, которые позволяют быстро проводить подобный визуальный анализ.</p>

<p>Как уже отмечалось ранее, графики из этой категории могут быть понятны только самому автору, так как не содержат необходимых пояснений и не предназначены для широкой аудитории.
Подобные диаграммы - инструмент ученого или аналитика. Их место на рабочем компьютере.
Стоит публиковать такие изображения только после некоторой доработки.</p>

<h2 id="section-2">Аналитическая графика</h2>

<p>Это промежуточный этап между исследованием и презентацией. А если точнее, то это презентация, которая не дает готовых выводов, но  предоставляет читателю возможность исследовать данные  и делать выводы самостоятельно.</p>

<p>Это, возможно, самый сложный для создания, но и самый интересный тип визуализации. Он объединяет в себе строгость в отношении к исходным данным и визуальную привлекательность. Много интересного можно почерпнуть из книг Эдварда Тафти. Он является ведущим современным специалистом в области визуализации, написал несколько книг по отображению информации.</p>

<p>Приведу здесь список принципов для аналитической графики по его книге Beautiful Evidence (глава The Fundamental Principles of Analytical Design)</p>

<ol>
  <li>Показывать сравнения;</li>
  <li>Показывать механизм, объяснение, структуру (причинно-следственные связи);</li>
  <li>Показывать многомерные данные;</li>
  <li>Объединять типы представления (разные графики, текст) в единое представление;</li>
  <li>Документация: пояснять данные с помощью легенды, масштабов, указания на источники;</li>
  <li>Содержание превыше всего.</li>
</ol>

<p>Рассмотрим несколько классических примеров. 
Основателем графических методов в статистике считается шотландский инженер и политэконом Уильям Плейфер. Его работы относятся к концу 18 - началу 19 века. На рисунке ниже представлены линейчатый график и гистограмма из работы “Коммерческий и политический атлас”  1786 года.</p>

<p><img src="http://datadeep.ru/images/Playfair.png" /></p>

<p>Диаграмма французского инженера Шарля Минара (Charles Minard) о походе Наполеона в Россию — отличная иллюстрация изложенных выше принципов. На схеме мы видим изменение численности французской армии по мере наступления на Москву (бежевый цвет) и последующего отступления (черный цвет). Для отступления прилагается график изменения температуры. Диаграмма снабжена пояснениями, подписями населенных пунктов и рек.</p>

<p><img src="http://datadeep.ru/images/Minard.jpg" /></p>

<p>Диаграмма Флоренс Найтингейл — одна из первых круговых диаграмам. С ее помощью сестра милосердия продемонстрировала, что в британской армии от антисанитарии умирает больше людей, чем от ранений.</p>

<p><img src="http://datadeep.ru/images/Nightingale-mortality.jpg" /></p>

<p>Графика этого типа отлично подходит для научной статьи, сайта в интернете или раздаточного материала.</p>

<p>На современные примеры аналитической графики повлияло развитие браузеров, поддерживающих анимацию и интерактивность. Более того, такая визуализация доступна любому пользователю сети.
С помощью интерактива можно группировать и фильтровать данные, рассматривать их в разном масштабе — от общей картины до частностей.
Много примеров такой графики создано с помощью Javascript библиотеки <a href="http://d3js.org">D3.js</a>. Хорошей иллюстрацией является <a href="http://white-nights.datalaboratory.ru">визуализация марафона “Белые ночи”</a> от Лаборатории данных.</p>

<p><img src="http://datadeep.ru/images/maraphon.png" /></p>

<p>Cоздающий подобную графику человек должен разбираться не только в данных и предметной области, но и в особенностях восприятия человеком визуальных образов, а еще в человеко-компьютерном взаимодействии.</p>

<p>Распространенным применением аналитической визуализации являются дэшборды — информационные панели, содержащие графики основных показателей. Они часто используются в бизнесе для мониторинга, создания отчетности и при принятии решений. Приведенный на картинке пример сделан с помощью сервиса <a href="http://www.tableau.com">Tableu</a>.</p>

<p><img src="http://datadeep.ru/images/Dashboard.png" /></p>

<p>Еще один замечательный пример интерактивного исследования данных — приложение <a href="http://www.gapminder.org">Trendalyzer</a>.
Пузырьковая диаграмма, демонстрирующая изменения экономических и социальных показателей для стран мира за последние десятилетия.</p>

<p><img src="http://datadeep.ru/images/hans-rosling.jpg" /></p>

<p>Стоит посмотреть шикарную <a href="http://www.youtube.com/watch?v=hVimVzgtD6w">первую презентацию</a>  этой программы ее автором — шведским профессором Хансом Рослингом на конференции TED. Это тот редкий случай, когда сложная графика на экране становится понятной благодаря анимации и сильному выступлению докладчика. Последующие выступления Рослинга также заслуживают внимания, в том числе с точки зрения наглядного изображения информации.</p>

<p>Самое время перейти к презентационной графике.</p>

<h2 id="section-3">Презентационная графика</h2>

<p>Здесь мы говорим о презентации в чистом виде, когда график несет в себе одну идею, недвусмысленное сообщение автора.
Отличие от аналитической графики заключается в том, что читатель не должен расшифровывать ваше послание, так как условия просмотра подобных изображений не предполагают длительного изучения.
Такую графику можно увидеть на слайдах презентации или по телевизору. Иногда простые графики встречаются в печатных изданиях.</p>

<p>При внешней простоте создать эффективную презентационную графику бывает непросто.</p>

<p>Для начала, важно подобрать подходящий <strong>тип диаграммы</strong>, который донесет нашу мысль наиболее наглядно.
 Много полезных советов о выборе типа графика можно найти в книге Джина Желязны “Говори на языке диаграмм”. Книга построена как учебник со множеством примеров и упражнений.</p>

<p>Далее, надо учесть <strong>контекст</strong> восприятия и не перегрузить диаграмму данными.
Обычно у зрителя нет возможности внимательно исследовать график. 
Очень часто люди показывают на слайдах непонятные, перегруженные текстом и данными графики, которые практически невозможно объяснить.</p>

<p>В качестве примера приведу иллюстрацию из замечательной книги Алексея Каптерева “Мастерство презентации”.
Так он представляет типичный слайд с графиком из корпоративной презентации:</p>

<p><img src="http://datadeep.ru/images/slide01.png" /></p>

<p>Научные презентации тоже часто изобилуют сложными диаграммами, как будто это повышает доверие к автору.
Но опять же, стоит учитывать ожидания аудитории — на научной конференции люди больше настроены думать и вникать, так что могут просто не доверять слишком простой диаграмме.
При этом не забывайте, что способности к восприятию ограничены даже у ученых. 
Не стоит превращать свои слайды в склад всех имеющихся данных. 
Алексей пишет:</p>

<blockquote>
  <p>“Данные — это всего лишь способ доказать свою идею. Хорошая новость состоит в том, что если у вас есть идея, если вы знаете, что именно вы хотите сказать, то существует множество способов представить свои данные красиво и при этом не перегрузить аудиторию.”</p>
</blockquote>

<p>Для того, чтобы презентационная диаграмма удалась, надо убрать все лишнее, оставив только то, что подтверждает основную идею.
Саму идею стоит вынести в заголовок графика.</p>

<p>Рассмотрим приведенное в той же книге преобразование диаграммы Минара. Превращаем аналитическую графику в картинку, которая будет убедительно смотреться на слайде презентации.
“Нижняя диаграмма выглядит сильно упрощенной, но она способна донести вложенное в нее послание. Дело в том, что на самом деле необязательно видеть каждую российскую речушку, чтобы понять: Наполеон не был побежден в какой-то крупной битве.”</p>

<p><img src="http://datadeep.ru/images/slide02.png" /></p>

<p>Из-за своей презентационной специфики этот тип визуализации наиболее подвержен <strong>графическим манипуляциям</strong>. Смещение оси ординат, игры с относительным масштабом и перспективой, все прелести круговой диаграммы и “крутые” 3D эффекты — все это встречается здесь очень часто. Иногда умышленно, иногда по незнанию. Те же трехмерные эффекты встроены в PowerPoint и к сожалению все еще пользуются популярностью.</p>

<p>На слайде старины Стива сектор 19.5% выглядит больше, чем  21.2% за счет добавления объема. С круговой диаграммой на второй картинке тоже что-то не так.
Подробнее про подобные манипуляции можно почитать <a href="http://en.wikipedia.org/wiki/Misleading_graph">здесь</a>.</p>

<p><img src="http://datadeep.ru/images/Presentation.png" /></p>

<h2 id="section-4">Инфографика</h2>

<p>Слово инфографика в последнее время стало очень популярно. 
Из-за отсутствия точного определения его часто путают с другими видами визуализации или называют инфографикой любую красивую картинку с цифрами.</p>

<p>Я бы выделил следующие особенности, присущие именно инфографике. Во-первых, цель инфографики — просвещение и развлечение. Во-вторых, инфографика создается дизайнерами и журналистами. Существует даже специальный термин — журналистика данных. В-третьих, большое внимание уделяется привлекательности картинки.</p>

<p>Хорошая инфографика похожа на аналитическую визуализацию. Но она не нацелена на поиск закономерностей или принятие решений, ее роль скорее просветительская. Рассмотрим несколько примеров.</p>

<p>Визуализация нобелевских лауреатов</p>

<p><img src="http://datadeep.ru/images/nobel-prizes-and-laureates.jpg" /></p>

<p>Красивая инфографика о китах</p>

<p><img src="http://datadeep.ru/images/INFO-BALLENA.jpg" /></p>

<p>На картинке ниже мы видим хорошее применение сильной метафоры.
В аналитической графике перевернутая ось ординат только сбивала бы с толку, но в инфографике для усиления эмоционального воздействия такой прием допустим.</p>

<p><img src="http://datadeep.ru/images/iraqdeaths.jpg" /></p>

<p>Примеры на русском можно посмотреть здесь: <a href="http://infographicsmag.ru/journal/">журнал “Инфографика”</a>, <a href="http://ria.ru/infografika/">инфографика РИА Новости</a>.</p>

<h2 id="section-5">Скетчи (рисунки на салфетке)</h2>

<p>Иногда нужно визуализировать не данные, а идеи, концепции и взаимосвязи. 
Тут на помощь приходят простые рисунки от руки. 
Применяются они на брейнштормах или при объяснении. Как и исследовательская графика, являются подручным инструментом, но основаны не на данных, а на идеях.
Картинка <a href="http://habrahabr.ru/post/249759/">отсюда</a>.</p>

<p><img src="http://datadeep.ru/images/sketch01.png" /></p>

<p>Важный поджанр — mind maps (интеллект-карты, диаграммы связей). Они используются при обучении или мозговом штурме, для запоминания или решения проблем с помощью визуального мышления. Часто назначение этого вида рисунков — выплеснуть на бумагу содержимое головы. 
Поэтому иногда понять смысл рисунка может только автор.</p>

<p><img src="http://datadeep.ru/images/sketch02.png" /></p>

<p>В мире скетчей существует свое разнообразие жанров и различные методики их использования, но в этой статье мы на них останавливаться не будем.
Подробнее про визуальное мышление можно почитать в книге Дэна Роэма “Практика визуального мышления”.</p>

<h2 id="section-6">Арт</h2>

<p>Художники, работающие в жанре генеративного искусства (не путать с дегенеративным) используют те же методы, что и исследователи данных, но стремятся достичь эстетической привлекательности результата. 
С помощью данных, полученных из интернета или каких-либо датчиков, он создают картины, видеоролики и интерактивные инсталляции.
Очень часто в качестве инструмента используют язык Processing.</p>

<p>Ярким представителем является берлинская студия <a href="http://www.onformative.com/">Onformative</a>. Ниже представлены примеры их работ: визуализация фейсбучной страницы и интерактивная витрина для магазина Nike.</p>

<p><img src="http://datadeep.ru/images/onformative_facebook.jpg" />
<img src="http://datadeep.ru/images/onformative_nike.jpg" /></p>

<p>Большинство работ подобного жанра, хоть и основаны на числовых данных, располагают только к эстетическому восприятию получившейся картины. Ниже изображена визуализация числа Пи.</p>

<p><img src="http://datadeep.ru/images/art-of-pi.png" title="Визуализация числа Пи" /></p>

<h2 id="section-7">Заключение</h2>

<p>Итак, мы достаточно поверхностно рассмотрели применение визуализации в различных областях человеческой деятельности от науки до искусства.
Про каждую из этих областей можно писать гораздо подробнее, ведь мир визуализаций невероятно разнообразен.
К тому же он подвижен, живет и развивается. Новые технологические изобретения, такие как дополненная и виртуальная реальности, голография и пр. привнесут свой вклад в развитие этой области.</p>

<p>В следующих статьях этого раздела мы рассмотрим инструменты для создания различных визуализаций. Начнем с разведочной графики, грамотное применение которой может существенно упростить работу датолога. Но вне зависимости от области применения при создании графики мы всегда должны помнить о цели нашей работы и задавать себе важнейшие вопросы:</p>

<ul>
  <li>что за данные мы визуализируем;</li>
  <li>что мы хотим сказать своей визуализацией;</li>
  <li>кто будет работать с этой графикой;</li>
  <li>и в каком контексте.</li>
</ul>

<p><img src="http://datadeep.ru/images/ending.png" title="Элементы компьютетной графкик для фильма &#34;Трон: Наследие&#34;" alt="Элементы компьютетной графкик для фильма &#34;Трон: Наследие&#34;" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Обнаружение дорожных знаков с помощью Deep Learning]]></title>
    <link href="http://datadeep.ru/blog/2015/08/16/dietiektirovaniie-dorozhnykh-znakov-s-pomoshch'iu-deep-learning/"/>
    <updated>2015-08-16T23:36:02+03:00</updated>
    <id>http://datadeep.ru/blog/2015/08/16/dietiektirovaniie-dorozhnykh-znakov-s-pomoshch&#8217;iu-deep-learning</id>
    <content type="html"><![CDATA[<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js"></script>

<script type="text/javascript" src="http://code.jquery.com/jquery-1.11.3.min.js"></script>

<script type="text/javascript" src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>

<link href="http://datadeep.ru/d3/bootstrap_tooltip_popover.css" rel="stylesheet" />

<p>Команда блога DataDeep не смогла остаться в стороне от <a href="https://meduza.io/news/2015/07/17/samoupravlyaemaya-mashina-google-popala-v-pervoe-dtp-s-postradavshimi">новости об аварии самоуправляемого автомобиля Google</a>, и поэтому я решил написать пост о своём опыте разработки системы для обнаружения дорожных знаков, основанной на машинном обучении. Такую систему вполне можно отнести к компонентам, которые используются как для разработки механизмов автономного упраления автомобилем, так и в современных системах помощи водителю :)</p>

<p><img src="http://datadeep.ru/images/selfdrivingcar.jpg" width="768" height="576" title="Self-driving car" /></p>

<!-- more -->

<h2 id="section">Постановка задачи, описание данных</h2>

<p>Итак, мы хотим сделать приложение, которое будет максимально достоверно находить и выделять рамкой (region of interest, ROI) дорожные знаки на изображении, поступившем на вход. Сердцем метода, решающего эту задачу, будет, как не трудно предположить, машинное обучение. Для использования такого подхода необходимы тренировочные данные, в качестве которых будем использовать данные с соревнования <a href="http://benchmark.ini.rub.de/?section=gtsdb&amp;subsection=dataset">The German Traffic Sign Detection Benchmark</a>. Это соревнование по детектированию и определению категории дорожного знака, которое проводилось в 2013 году. В этих данных содержится информация о знаках из нескольких категорий, таких как предупреждающие, приоритета, запрещающие и предписывающие. Парным к нему является соревнование по распознаванию знаков The German Traffic Sign Recognition Benchmark, в котором алгоритм, построенный на основе глубоких нейронных сетей (deep learning), <a href="http://www.nytimes.com/2012/11/24/science/scientists-see-advances-in-deep-learning-a-part-of-artificial-intelligence.html?_r=0">превзошёл по точности распознавания уровень человека</a>.</p>

<p>Данные представляют собой 900 изображений размером $1360 \times 800$ в формате ppm, а также 1213 изображений дорожных знаков, взятых с этих картинок, размером от $16\times16$ до $128\times128$ в формате ppm.  Некоторые из больших изображений содержат один и более знак, в то время, как другие не содержат знаков вовсе. ROI задаётся с помощью четырёхмерного вектора с координатами прямоугольной рамки <script type="math/tex">(x_{min}, y_{min}, x_{max}, y_{max})</script>. Для всех 900 изображений заданы правильные ROI. Несколько примеров из данных:</p>

<p>Один дорожный знак:</p>

<p><img src="http://datadeep.ru/images/0.jpg" title="Один знак" /></p>

<p>Два знака:</p>

<p><img src="http://datadeep.ru/images/1.jpg" title="Два знака" /></p>

<p>Без знаков:</p>

<p><img src="http://datadeep.ru/images/2.jpg" title="Без знаков" /></p>

<p>Таким образом, наша задача заключается в том, чтобы обучить алгоритм, который для входного изображения будет выдавать ноль или более четырёхмерных векторов по числу обнаруженных дорожных знаков.</p>

<h2 id="state-of-the-art-">Обзор <em>state of the art</em> подходов</h2>

<p>Начиная примерно с 2012 года, когда на очень известном в сообществе computer vision соревновании по распознаванию изображений <a href="http://www.image-net.org/">ImageNet</a> победила команда университета Торонто под руководством Джеффри Хинтона, показав при этом значительный отрыв в точности от других команд, state of the art методом для распознавания изображений считается использование глубоких свёрточных нейронных сетей (Convolutional neural network, CNN), которые, в свою очередь, являются представителем класса алгоритмов машинного обучения deep learning (глубокое или, если угодно, глубинное обучение). Очень многие лучшие на сегодняшний день системы машинного зрения основаны на CNN, например <a href="https://research.facebook.com/publications/480567225376225/deepface-closing-the-gap-to-human-level-performance-in-face-verification/">система распознавания лиц от Facebook</a> (к слову, глава Facebook AI Research Ян Лекун является одним из пионеров в исследовании CNN и deep learning).</p>

<p>В области детектирования предметов на изображении одним из самых эффективных является метод <em>Regions with CNN features</em> или <em>R-CNN</em>, представленный в 2014 году. Этот метод можно разделить на следующие этапы:</p>

<ol>
  <li>Определение областей изображения, которые могут содержать интересующие нас объекты, с помощью алгоритма <em>Selective search</em>;</li>
  <li>Выделение из полученных областей признаков, используя свёрточную нейронную сеть;</li>
  <li>Эти признаки подаются на вход SVM (support vectors machine), которая классифицирует объект.</li>
</ol>

<p>Существуют и другие успешные методы детектирования, основанные на CNN, например <a href="http://arxiv.org/abs/1312.6229">построение регрессии</a> для нахождения четырёхмерного вектора ROI (т.е. на последнем уровне CNN находятся не вероятности, а целые значения). Однако, идея алгоритма, который мы будем строить, вдохновлена в первую очередь R-CNN, благодаря его простоте и эффективности, и реализует три его этапа, хотя имеет ряд значительных отличий.</p>

<h2 id="section-1">Описание метода</h2>

<p>Перед тем, как описать структуру метода для обнаружения дорожных знаков на изображении, скажу пару слов о технологиях, которые будут использованы. В качестве языка программирования применяется Python, так как для него есть API всех необходимых библиотек, и в данном случае нам больше важна гибкость и лёгкость прототипирования, чем скорость работы приложения.</p>

<p>Вся работа со свёрточными нейронными сетями ведётся с помощью изумительной библиотеки <a href="http://caffe.berkeleyvision.org/">Caffe</a>. Она позволяет конструировать, обучать и применять CNN, содержит state of the art виды слоёв и методы тренировки сети, обрабатывает данные в различных форматах (в том числе HDF5), позволяет обучать сети на графическом процессоре (GPU) с использованием CUDA, имеет обёртку для Python pycaffe. Для Caffe есть хранилище Model zoo, в котором содержаться обученные модели, которые можно использовать для своих задач. Также хочется отметить хорошие туториалы и большое сообщество. Архитектура нейронных сетей и параметры метода обучения задаются в Caffe в файлах <a href="https://developers.google.com/protocol-buffers/docs/overview">формата prototxt</a>.</p>

<p>Для обработки изображений используется библиотека OpenCV, которая, я думаю, не нуждается в дальнейшем представлении.</p>

<h3 id="mser">Детектор MSER</h3>

<p>Приступим непосредственно к методу решения задачи. На первом этапе будем определять области входного изображения, которые потенциально могут содержать дорожный знак. Для этого было рассмотрено несколько детекторов (в частности selective search из R-CNN, который не смог хорошо выделить области со знаками). Метрикой качества служило среднее евкидово расстояние между настоящим ROI на изображениях из тренировочных данных и ближайшим к нему ROI, полученным с помощью детектора.   Лучше всего себя показал метод <a href="https://en.wikipedia.org/wiki/Maximally_stable_extremal_regions">MSER</a> (maximally stable extremal regions). Из выделенных MSER областей отбирались те, в которых длина и ширина лежат в пределах от 16 до 128 и их соотношение не превышает 1.5 (т.е. более-менее близки по форме к квадрату). Таким образом, мы получаем набор областей, в которых может содержаться один дорожный знак.</p>

<h3 id="main-cnn">Main CNN</h3>

<p>На следующем этапе алгоритма для определения того, содержит ли область изображения из предыдущего этапа знак, будем применять классификатор. В этом качестве выступит представитель класса методов deep learning — глубокая свёрточная нейронная сеть. Ей на вход будет поступать изображение, а на выходе будут две вероятности, сумма которых равна 1: того, что изображение содержит и не содержит дорожный знак. Архитектура нейронной сети, которую мы будем использовать, сходна c архитектурой весьма эффективной сети <em>Network in network</em> (NIN), которая хорошо себя показала в 2014 году в конкурсе <a href="http://www.cs.toronto.edu/~kriz/cifar.html">CIFAR-10</a> (определение, к какой из 10 категорий принадлежит изображение).</p>

<p>На вход нейронная сеть получает RGB изображение размером $32\times32$, которое предварительно преобразуется в такой формат, если нужно. Рассмотрим вкратце слои сети:</p>

<ul>
  <li><em>Свёрточный слой</em> (CONVOLUTION) — как видно из названия, является основной частью CNN. Он реализует обычную операцию свёртки: мы идём по изображению скользящим окном, перемножаем значения в окне с заданными весами (ядром), а затем всё складываем. Наборов весов может быть несколько. Проиллюстрируем то, что делает свёрточный слой (картинка взята с <a href="http://habrahabr.ru/">хабра</a>):</li>
</ul>

<p><img src="http://datadeep.ru/images/cnn_principle.png" title="Свёртка" /></p>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/Rectifier_(neural_networks)"><em>Rectified linear unit</em></a> (RELU) — слой, в котором нет какой-то сложной математики и, как следствие, настраиваемых параметров. Он служит для того, чтобы получить нелинейность. К каждому входному значению этого слоя применяется функция:</li>
</ul>

<p><img src="http://datadeep.ru/images/relu.jpeg" title="Rectified linear unit" /></p>

<p>Это то, что происходит в нейроне, так называемая <em>activasion function</em>. В “классических” нейронных сетях для этого используется сигмоидная функция или тангенс. Однако в последнее время эмпирически было установлено, что простая функция RELU оказывается очень эффективной.</p>

<ul>
  <li>
    <p><em>Pooling</em> (POOLING) — служит для уменьшения размерности. Входной двумерный массив делится на сектора, в зависимости от параметров, и в каждом из них происходит максимизация (MAX) или усреднение (AVE) (два самых распространённых вида pooling’а).</p>
  </li>
  <li>
    <p><em>Dropout</em> (DROPOUT) — недавно открытый, очень эффективный и простой способ регуляризации (т.е. снижения эффекта переобучения). Его суть заключается в том, что с заданной вероятностью нейроны сети отключаются и не участвуют в текущей итерации обучения.</p>
  </li>
</ul>

<p>Архитектура всей сети представляет собой 3 больших последовательно соединённых слоя, каждый из которых состоит из [CONVOLUTION -&gt; RELU -&gt; CONVOLUTION -&gt; RELU -&gt; CONVOLUTION -&gt; RELU -&gt; POOLING -&gt; DROPOUT]. На самом последнем слое мы получаем две вероятности. Назовём эту сеть <em>Main CNN</em>.</p>

<h4>Структура Main CNN (при наведении на слой отображаются его параметры)</h4>

<div id="container">     
</div>

<script type="text/javascript">

function removetooltips () {
  $('.tooltip').each(function() {
    $(this).remove();
  }); 
}

function showtooltip (d) {
  $(this).tooltip({
	animation: true,  
    placement: 'auto right',
    container: 'body',
    trigger: 'manual',
    html : true,
    title: function() { 
	  var info
	  
	  if (d.type == "DATA"){
	          info = d.description
          }
      else{    
      info = 
      "<strong>Название</strong>: " + d.name + "<br><strong>Тип</strong>: " + d.type;
      
      if (d.type=="CONVOLUTION"){
			  info+=
			  '<hr><em>Параметры слоя:</em><br>'+"<strong>Число элементов на выходе</strong>: "+d.convolution_param.num_output
			  +'<br>'+"<strong>Размер ядра</strong>: "+d.convolution_param.kernel_size
			  +'<br>'+"<strong>Инициализация весов</strong>: "+d.convolution_param.weight_filler.type
			  +'<br>'+"<strong>Инициализация смещения</strong>: "+d.convolution_param.bias_filler.type
			  ;
		  }
		  
	 if (d.type=="POOLING"){
			  info +=
			  '<hr><em>Параметры слоя:</em><br>'+"<strong>Тип pooling'а</strong>: "+d.pooling_param.pool
			  +'<br>'+"<strong>Размер ядра</strong>: "+d.pooling_param.kernel_size
			  +'<br>'+"<strong>Шаг</strong>: "+d.pooling_param.stride
			  ;
		  }
		  
		  if (d.type=="DROPOUT"){
			  info+='<hr><em>Параметры слоя:</em><br>'+"<strong>Вероятность dropout'а</strong>: "+d.dropout_param.dropout_ratio
			  ;
		  }	  
        }
      
      
      return info;
      }
  });
  $(this).tooltip('show')
}


        
var margin = {top: 0, right: 0, bottom: 20, left: 10}

var width = 700 - margin.left - margin.right
var height = 640 - margin.top - margin.bottom

var svg = d3.select("#container").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")")   
         	
       
var colors = d3.scale.category10();  

var w = 150;   

//Read JSON file    
        
d3.json("/d3/layers.json",function(data){
			

var  Network  = svg.append("g").attr("class","Network");
                      
              
                      
                
h = (height/ data.layers.length);
   
var layer = Network.selectAll("g.layer")
                    .data(data.layers)
                    .enter()
                    .append("g")
                    .attr("class","layer")
                    .attr("transform",function(d,i){
	                    var dy = i*h;
	                    return 'translate(0,'+dy+')'
                    });
                    


var lrect = layer.append("rect")
				.attr('class',"layerrect")
				.attr("x",0)  
				.attr("y",0)
				.attr("rx",function(d){
					if(d.type=="DROPOUT"){return 12}
						else if (d.type=="RELU"){return 0}
							else
								{return 5}
					})
				.attr("height",h-5)
				.attr("width",w)
				.style("fill",function(d){
						return colors(d.type)			
				})
				.style("fill-opacity",0.7);

layer.append("rect")
	.attr('class',"arrow")
	.attr("x",w/2-1)  
	.attr("y",h-5)                  
	.attr("height",function(d,i){if(i<data.layers.length-1) {return 5} else {return 0};})
	.attr("width",2)
	.style("fill",function(d){
						return colors(d.type)			
	})
	.style("fill-opacity",0.7);


layer.append("text")
	.attr("dy", h/2+2)
	.attr("dx",w/2)
	.attr("fill","white")
	.style("text-anchor", "middle")
	.text(function(d){return d.name})

layer.on("mouseover", function(d,i) { 
									d3.select(this).select(".layerrect")
												   .attr( "width", w+10);
									showtooltip.call(this, d);                  
			                                               } )
     .on("mouseout", function() { 
	     							d3.select( this ).select(".layerrect")
	     											 .transition()
			                                         .ease("elastic")
			                                         .attr( "width", w);
			                        removetooltips();
			                                                } )
			                                                
/*			                                                
layer.on("mouseover", function (d) { showtooltip.call(this, d); })
   .on("mouseout",  function (d) { removetooltips(); })
/*
//Tipsy  			
                $('svg .layer').tipsy({ 
        gravity: 'w', 
        html: true, 
        fade: false,
        title: function() {
          var d = this.__data__;

          if (d.type == "DATA"){
	          info = '<font size="2">'+d.description
          }
          else{
          info = '<font size="2">'
          +"<strong>name</strong>: "+d.name
          +'</br>'+"<strong>type</strong>: "+d.type
          +'</br>'+"<strong>top</strong>: "+d.top
		  +'</br>'+"<strong>bottom</strong>: "+d.bottom;
		  }
		  
		  
		  if (d.type=="CONVOLUTION"){
			  info+="<hr><em>convolution_param:</em>"
			  +'</br>'+"<strong>num_output</strong>: "+d.convolution_param.num_output
			  +'</br>'+"<strong>kernel_size</strong>: "+d.convolution_param.kernel_size
			  +'</br>'+"<strong>weight_filler.type</strong>: "+d.convolution_param.weight_filler.type
			  +'</br>'+"<strong>weight_filler.std</strong>: "+d.convolution_param.weight_filler.std
			  +'</br>'+"<strong>bias_filler.type</strong>: "+d.convolution_param.bias_filler.type
			  ;
		  }
		  
		  if (d.type=="POOLING"){
			  info+="<hr><em>pooling_params:</em>"
			  +'</br>'+"<strong>pool</strong>: "+d.pooling_param.pool
			  +'</br>'+"<strong>kernel_size</strong>: "+d.pooling_param.kernel_size
			  +'</br>'+"<strong>stride</strong>: "+d.pooling_param.stride
			  ;
		  }
		  
		  if (d.type=="DROPOUT"){
			  info+="<hr><em>dropout_param:</em>"
			  +'</br>'+"<strong>dropout_ratio</strong>: "+d.dropout_param.dropout_ratio
			  ;
		  }
		  
		   
          info=info+'</font>'
          return info;
        }
      }); 
      */

	return data;	
})

             
</script>

<p><a href="https://github.com/andrewbo29/traffic_signs_detector/blob/master/model/signet_nin_finetune_train_val.prototxt">Полное описание свёрточной нейронной сети</a> в формате prototxt, которое применятся для её обучения с помощью Caffe.</p>

<p>Для того, чтобы обучить всю эту сеть, будем использовать стандартный метод оптимизации <a href="https://en.wikipedia.org/wiki/Stochastic_gradient_descent">Batch stochastic gradient descent</a> с уменьшением параметра learning rate в 10 раз каждые 1000 шагов, начальный learning rate — 0.000001. Кроме того, применим метод Momentum Нестерова с параметром 0.9. В качестве регуляризации будем использовать <a href="https://en.wikipedia.org/wiki/Regularization_(mathematics)">Weight decay</a> с параметром 0.0001. Обучение будет остановлено или при достижении максимального количества итераций, или при малом изменении функции потерь. Prototxt файл со всеми параметрами оптимизации, который используется в Caffe:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Solver</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="err">test_iter:</span> <span class="mi">100</span>
</span><span class="line"><span class="err">test_interval:</span> <span class="mi">1000</span>
</span><span class="line"><span class="err">base_lr:</span> <span class="mf">0.000001</span>
</span><span class="line"><span class="err">momentum:</span> <span class="mf">0.9</span>
</span><span class="line"><span class="err">weight_decay:</span> <span class="mf">0.0001</span>
</span><span class="line"><span class="err">lr_policy:</span> <span class="s2">&quot;step&quot;</span>
</span><span class="line"><span class="err">gamma:</span> <span class="mf">0.1</span>
</span><span class="line"><span class="err">stepsize:</span> <span class="mi">1000</span>
</span><span class="line"><span class="err">display:</span> <span class="mi">100</span>
</span><span class="line"><span class="err">max_iter:</span> <span class="mi">50000</span>
</span><span class="line"><span class="err">snapshot:</span> <span class="mi">1000</span>
</span><span class="line"><span class="err">solver_mode:</span> <span class="err">GPU</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Для ускорения обучения будем применять подход <em>Fine-tuning</em>: веса нейронной сети инициализируются предобученными для другой (но похожей) задачи. Мы используем веса, которые были обучены авторами NIN для задачи CIFAR-10.</p>

<h3 id="features-learning-cnn">Features learning CNN</h3>

<p>Итак, с помощью описанной выше CNN мы отберём области изображения, скорее всего содержащие знак (т.е. те, для которых вероятность наличия знака, выданная сетью, больше порога 0.5). Для того, чтобы улучшить качество распознавания, построим поверх нейронной сети ещё один классификатор. Для этого будем использовать CNN, аналогичную той, которую мы уже построили, только без последних двух слоёв pooling’а и вероятностей. Если посмотреть на параметры в описании архитектуры используемой CNN, то от туда можно понять, что новая сеть будет выдавать на выходе вектор размерности 128. Назовём её <em>Features learning CNN</em>. В качестве весов она использует натренированные веса Main CNN. Features learning CNN мы будем применять к областям изображений, которые по мнению Main CNN содержат дорожный знак.  Мы получим 128-размерный вектор признаков, который будем “скармливать” машине опорных векторов (SVM) с полиномиальным ядром степени 2 и параметром регуляризации 0.1.</p>

<p>Таким образом, полный алгоритм представляет собой ансамбль:</p>

<p><img src="http://datadeep.ru/images/pipeline.png" title="Pipeline" /></p>

<h3 id="bootstrap">Bootstrap</h3>

<p>Для того, чтобы нарисовать ROI, содержащую дорожный знак, нам остался ещё один шаг. В силу особенностей метода MSER может получиться ситуация, когда для одного знака получается несколько очень близко расположенных рамок (т.е. областей изображения, отобранных на предыдущем этапе). Объединив такие рамки в одну (взяв наибольшую из них), мы получим финальный ROI.</p>

<h2 id="section-2">Применение метода</h2>

<p>Теперь опишем то, как обучался алгоритм и что из этого вышло. Прежде всего, нам необходимы тренировочные данные для Main CNN. Разделим имеющиеся в нашем распоряжении 900 изображений на 600 тренировочных и 300 тестовых. В исходных данных уже есть изображения дорожных знаков, т.е. положительные прецеденты, однако нет отрицательных, т.е. изображений без знаков. Для того, чтобы получить эти данные, используем следующую процедуру: к каждому изображению из тренировочных данных применяется MSER и отбираются те его области, которые похожи по размерам на ROI (см. выше), не пересекаются с настоящим ROI, но при этом лежат относительно “не далеко” от него. Последний пункт нужен, т.к. CNN будет хорошо “отличать” дорожный знак от, например, неба или асфальта, но плохо от окна, фары машины, листвы и т.д., т.е. от объектов, которые на изображении находятся достаточно близко к знаку. Таким образом, если мы будем брать любые области, не пересекающиеся с ROI, то большинство из них будет содержать небо, дорожное покрытие, стены домов и т.п., что негативно отразится на качестве классификации. Всего таких отрицательных прецедентов отберём около 2000, чтобы выборка для обучения Main CNN была сбалансированной.</p>

<p>Примеры положительных прецедентов:</p>

<p><img src="http://datadeep.ru/images/train_main_cnn_plus.png" title="Положительные прецеденты" /></p>

<p>Примеры отрицательных прецедентов:</p>

<p><img src="http://datadeep.ru/images/train_main_cnn_minus.png" title="Отрицательные прецеденты" /></p>

<p>Чтобы улучшить качество распознавания дорожных знаков с помощью Main CNN будем использовать трюк, который является формой boosting’а:</p>

<ol>
  <li>Обучим Main CNN на полученных нами на предыдущем этапе тренировочных данных;</li>
  <li>Определим, на каких отрицательных прецедентах Main CNN ошибается;</li>
  <li>Сформируем из них и положительных прецедентов новую тренировочную выборку;</li>
  <li>Продолжим обучение Main CNN с помощью Fine-tuning, где в качестве начальных весов используются веса, полученные в пункте 1;</li>
  <li>Повторим пункты 1–4 три раза.</li>
</ol>

<p>Примеры новых отрицательных прецедентов:</p>

<p><img src="http://datadeep.ru/images/train_main_cnn_new_minus.png" title="Новые отрицательные прецеденты" /></p>

<p>При обучении SVM на изначальных тренировочных данных Main CNN результаты следующие: F1-score — 0.85, точность — 0.85.</p>

<p>После тренировки всех частей ансамбля алгоритмов мы можем применить их к тестовым данным. В качестве метрики точности для изображений, содержащих дорожные знаки, возьмём наименьшее евклидово расстояние между векторами, описывающими ROI. Это не самая точная метрика, однако она даёт представление о качестве работы метода. Результаты на тестовых данных (300 изображений): 39.9; число случаев, когда алгоритм не показал ROI, а они есть (False negative): 33; число случаев, когда алгоритм показал ROI, а их нет (False positive): 5. Ниже представлено несколько характерных примеров работы алгоритма.</p>

<p>Все знаки правильно обнаружены:</p>

<p><img src="http://datadeep.ru/images/all_1.jpeg" title="Все знаки" /></p>

<p><img src="http://datadeep.ru/images/all_2.jpeg" title="Все знаки" /></p>

<p><img src="http://datadeep.ru/images/all_3.jpeg" title="Все знаки" /></p>

<p>Алгоритм может ошибаеться, принимая такие объекты, как фара машины, за знак:</p>

<p><img src="http://datadeep.ru/images/light.jpeg" title="Фара машины" /></p>

<p>Иногда алгоритм находит не все знаки:</p>

<p><img src="http://datadeep.ru/images/not_all.jpeg" title="Не все знаки" /></p>

<p>False positive:</p>

<p><img src="http://datadeep.ru/images/false_positive.jpeg" title="False positive" /></p>

<p><img src="http://datadeep.ru/images/false_positive_2.jpeg" title="False positive" /></p>

<h2 id="section-3">Заключение</h2>

<p>Подводя итог, можно сказать, что был разработан несложный, но вполне рабочий алгоритм, основанный на deep learning для обнаружения дорожных знаков на изображении. В силу того, что обучение происходило на машине с относительно слабой конфигурацией (8 Гб оперативной памяти, GPU: GeForce 730, 2Гб памяти), увеличение вычислительных мощностей и добавление дополнительных данных приведёт к улучшению качества работы как свёрточной нейронной сети, так и SVM.</p>

<p>В статье мы рассмотрели использование CNN, коснулись ReLU, Pooling, Dropout и других понятий, входящих в такую область машинного обучения, как deep learning. Для того, чтобы больше узнать об этом стремительно набирающем в последние несколько лет популярность направлении, в дальнейшем будет сделан цикл статьей по теории и практике глубоких нейронных сетей, благо название блога обязывает!</p>

<h2 id="section-4">Ссылки</h2>

<ol>
  <li><a href="http://www.cs.toronto.edu/~fritz/absps/imagenet.pdf">Статья с описанием метода команды университета Торонто</a></li>
  <li><a href="http://www.cs.berkeley.edu/~rbg/papers/r-cnn-cvpr.pdf">Regions with CNN features</a></li>
  <li><a href="http://arxiv.org/abs/1312.4400">Network in network</a></li>
  <li><a href="https://github.com/andrewbo29/traffic_signs_detector">Код на github</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Краткое введение в D3.js]]></title>
    <link href="http://datadeep.ru/blog/2014/12/03/kratkoie-vviedieniie-v-d3-dot-js/"/>
    <updated>2014-12-03T11:46:40+03:00</updated>
    <id>http://datadeep.ru/blog/2014/12/03/kratkoie-vviedieniie-v-d3-dot-js</id>
    <content type="html"><![CDATA[<script src="http://d3js.org/d3.v2.js"></script>

<p>В этой статье мы познакомимся с мощным инструментом визуализации данных – библиотекой D3.js.
Она позволяет представлять ваши данные в различных формах и  добавлять эффектные графики на веб-страницы.</p>

<p><img src="http://datadeep.ru/images/d3.png" width="768" height="316" title="D3.js examples" /></p>

<!-- more -->

<p>Существует много различных инструментов визуализации, некоторые из них имеют долгую историю и плотно прижились среди специалистов. Например, с помощью библиотеки ggplot2 для языка R можно строить достаточно сложные графики всего несколькими строчками кода, а ученые, использующие язык Python, создают графики при помощи библиотеки Matplotlib.</p>

<p>Но увеличение количества информации, развитие Интернета и рост графических возможностей современных программ создают новые ожидания от визуального представления данных:</p>

<ul>
  <li><strong>Интерактивность.</strong> Интерактивный график может демонстрировать изменения в зависимости от настройки параметров, сравнивать показатели для определенной пользователем выборки или вовсе показывать изменения данных в реальном времени. Такая визуализация не только предъявляет результат, но и позволяет зрителю анализировать данные самостоятельно;</li>
  <li><strong>Возможность публикации в Интернете.</strong> Визуализация служит не только для анализа данных, это еще и лучший способ поделиться своими выводами с миром. Выложить в сеть статичную картинку нетрудно, но интерактивная визуализация должна быть доступна без установки дополнительных приложений, то есть исполняться прямо в браузере;</li>
  <li><strong>Доступность данных.</strong> В случае со статичной картинкой, вы не можете получить доступ к исходным данным, чтобы что-то уточнить или проверить. Визуализация, создаваемая в вашем браузере на основе массива данных, не лишает Вас такой возможности;</li>
  <li><strong>Информационная эстетика.</strong> Речь здесь идет не о красоте, а об удобстве восприятия. Настройки по умолчанию для шрифтов и цветовых схем в некоторых системах зачастую не самые удачные, а изменить их не всегда легко. К тому же многие старые системы генерируют только растровые изображения, которые невозможно увеличить без потери качества. Выход: использовать векторную графику и графические возможности современных браузеров.</li>
</ul>

<p>В связи с этими ожиданиями создаются новые инструменты или улучшаются старые. Например, библиотека Bokeh для языка Python использует для визуализации элемент canvas, созданный как контейнер для графики в HTML5, а инструмент Plotly  позволяет экспортировать результаты работы ggplot2, matplotlib и MATLAB в интерактивные веб-графики.</p>

<p>Но стандартом интерактивных веб-визуализаций можно смело назвать JavaScript библиотеку D3.js Майка Бостока. Библиотека создана в 2011 году и родилась из проекта Protovis. Основной принцип работы D3 заключается в создании элементов  веб-страницы на основе загруженных данных. Для этого используются современные стандарты HTML, SVG (векторная графика), CSS. Основные форматы данных - CSV и JSON.  D3 расшифровывается как Data Driven Documents, что вполне описывает философию библиотеки.</p>

<p>Основные преимущества D3:</p>

<ul>
  <li><strong>Прозрачность связи данных и представления.</strong> Визуальные элементы, создаваемые с помощью библиотеки, напрямую связаны с Вашими данными. Данные хранятся в атрибутах графических элементов;</li>
  <li><strong>Гибкость в выборе представления.</strong> В D3 нет заготовок для различного вида графиков (для хорошей визуализации надо написать не один десяток строк кода), но она позволяет создавать графические элементы и изменять их параметры в соответствии с задачей. Именно поэтому она так хороша для создания нестандартных визуализаций;</li>
  <li><strong>Интерактивность.</strong> D3 позволяет без особых сложностей превратить график в интерактивный интерфейс, который показывает только актуальную для пользователя информацию.</li>
</ul>

<p>Очень много крутых примеров можно найти на <a href="http://bost.ocks.org/mike/">сайте</a> создателя библиотеки Майкла Бостока.</p>

<h2 id="section">Практический пример</h2>

<p>Попробуем создать несложный график и познакомиться с принципами работы D3.</p>

<p>Перед началом работы для удобства отладки необходимо <a href="https://github.com/mbostock/d3/">скачать</a> библиотеку и сохранить ее в директорию проекта. Структура папок при этом будет выглядеть так:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">project-folder/
</span><span class="line">               d3/
</span><span class="line">                  d3.js
</span><span class="line">                  d3.min.js (optional)
</span><span class="line">               index.html</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Папка с библиотекой может иметь и другое имя, например содержать номер актуальной версии. Слово min означает ограниченный функционал для разработчика, но и ее вполне хватит для начала работы.</p>

<p>Я не буду останавливаться на описании основ веб-технологии, которые Вы можете изучить самостоятельно. Для начала достаточно понимать, как работает HTML-документ, для чего нужны стили CSS и  как устроена SVG графика. Весь приведенный в последующих примерах код должен работать в таком шаблоне (в поле src должен быть указан путь к той версии библиотеки, которую вы скачали):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class="line"><span class="nt">&lt;html&gt;</span>
</span><span class="line">    <span class="nt">&lt;head&gt;</span>
</span><span class="line">        <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        <span class="nt">&lt;title&gt;</span>D3 Page<span class="nt">&lt;/title&gt;</span>
</span><span class="line">        <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;d3/d3.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">    <span class="nt">&lt;/head&gt;</span>
</span><span class="line">    <span class="nt">&lt;body&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class="line">        <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class="line">            <span class="c1">// Your D3 code will go here</span>
</span><span class="line">        <span class="nt">&lt;/script&gt;</span>
</span><span class="line">    <span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Начнем изучение с простейшего примера – построим диаграмму рассеяния (<em>scatterplot</em>) для небольшого массива данных.</p>

<div>
  <style type="text/css">

    .chart {
      font-family: Arial, sans-serif;
      font-size: 10px;
      margin-top: -40px;
    }

    .bar {
      fill: steelblue;
    }

    .axis path, .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

  </style>
</div>

<div id="container0" align="center"></div>
<script type="text/javascript">
        
        var w = 400;
        var h = 200;
        var padding = 30;

        
        var svg = d3.select("#container0")
             	      .append("svg")
          			  .attr("width", w)
          			  .attr("height", h);
        
        var dataset = [
                [50, 20], [480, 90], [250, 50], [100, 133], [330, 95],
                [410, 12], [475, 44], [25, 167], [185, 21], [120, 88],[600, 150]
              ];

        
        var xScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[0]; })])
                     .range([padding, w-padding*2]); 
                     
        var yScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[1]; })])
                     .range([h - padding, padding]);
                     
        var rScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[1]; })])
                     .range([2, 5]);  
                     
                                
        var xAxis = d3.svg.axis()
                  .scale(xScale)
                  .orient("bottom")
                  .ticks(5);
                  
         var yAxis = d3.svg.axis()
                  .scale(yScale)
                  .orient("left")
                  .ticks(5);                    
                     
                     
         svg.selectAll("circle")
			   .data(dataset)
			   .enter()
			   .append("circle")
			   .attr("cx", function(d) {return xScale(d[0]);})
			   .attr("cy", function(d) {return yScale(d[1]);})
			   .attr("r", function(d) { return rScale(d[1]);})
			   .attr("fill",function(d){if (d[0]>100) {return "teal"} else {return "orange"}});

		
			svg.append("g")
			    .attr("class", "axis")
			    .attr("transform", "translate(0," + (h - padding) + ")")
                .call(xAxis);  
            svg.append("g")
                .attr("class", "axis")
                .attr("transform", "translate(" + padding + ",0)")
                .call(yAxis);                                 
        
</script>

<p>Но для начала нарисуем круг. Для этого нам надо выполнить несколько простых шагов:</p>

<ul>
  <li>Выделить элемент страницы, на который мы хотим добавить графику. В нашем случае мы выделяем элемент, у которого id = “container”;</li>
  <li>Добавить элемент svg и обозначить его параметры: ширину и высоту;</li>
  <li>Добавить в SVG контейнер наш кружок;</li>
  <li>Задать параметры кружка: координаты центра, радиус и цвет.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">svg</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#container&quot;</span><span class="p">)</span>       <span class="c1">//1</span>
</span><span class="line">            <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;svg&quot;</span><span class="p">)</span>              <span class="c1">//2</span>
</span><span class="line">            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span><span class="mi">100</span><span class="p">)</span>
</span><span class="line">            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">          			
</span><span class="line"><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>                    <span class="c1">//3</span>
</span><span class="line">   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>                      <span class="c1">//4</span>
</span><span class="line">   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
</span><span class="line">   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
</span><span class="line">   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span><span class="s2">&quot;orange&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Вот что у нас должно получится:</p>

<div id="container1"></div>
<script>


             var svg = d3.select("#container1")
             	      .append("svg")
          			  .attr("width",100)
          			  .attr("height",100);
          			  
          	svg.append("circle")
			   .attr("cx", 50)
			   .attr("cy", 50)
			   .attr("r", 30)
			   .attr("fill","orange");		  
	    
</script>

<p>Свойства нашего нового объекта мы можем менять не только при создании, но и при дальнейшей работе. Для этого есть два способа:</p>

<ul>
  <li>создать js-переменную и обращаться к ней;</li>
  <li>обращаться к элементам с помощью функции выделения select или selectAll.</li>
</ul>

<p>В примере ниже мы меняем радиус круга с помощью первого способа (1), а цвет – с помощью второго (2):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">svg</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#container&quot;</span><span class="p">)</span>
</span><span class="line">            <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;svg&quot;</span><span class="p">)</span>
</span><span class="line">            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span><span class="mi">100</span><span class="p">)</span>
</span><span class="line">            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">circle</span> <span class="o">=</span> <span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class="line">            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
</span><span class="line">            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
</span><span class="line">            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span>
</span><span class="line"><span class="nx">circle</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span><span class="mi">50</span><span class="p">);</span>                    <span class="c1">//1</span>
</span><span class="line"><span class="nx">svg</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>                    <span class="c1">//2</span>
</span><span class="line">   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span><span class="s2">&quot;teal&quot;</span><span class="p">);</span>	
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div id="container2"></div>
<script>


             var svg = d3.select("#container2")
             	      .append("svg")
          			  .attr("width",100)
          			  .attr("height",100);
          			  
          	var circle=svg.append("circle")
			   .attr("cx", 50)
			   .attr("cy", 50)
			   .attr("r", 30);
			   
			circle.attr("r",50);
			
			svg.selectAll("circle").
			attr("fill","teal");	
			
				  
	    
</script>

<p>Все это прекрасно, но <strong>где же данные?</strong></p>

<p>Теперь используем массив данных для создания нескольких кругов.
Для этого применяется не вполне очевидная конструкция:</p>

<ul>
  <li>мы выделяем несуществующие (еще пока) элементы: selectAll(“circle”);</li>
  <li>связываем их с нашим массивом данных: data(dataset);</li>
  <li>создаем элементы: enter();</li>
  <li>добавляем на страницу окружности, используя данные.</li>
</ul>

<p>Механизм добавления окружностей тот же, что и примере выше. Отличие лишь в том, что окружность теперь создается для каждого элемента массива dataset. Атрибуты окружности (положение её центра) в данном случае определяются конкретными данными.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">svg</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#container&quot;</span><span class="p">)</span>
</span><span class="line">            <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;svg&quot;</span><span class="p">)</span>
</span><span class="line">            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span><span class="mi">200</span><span class="p">)</span>
</span><span class="line">            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span><span class="mi">200</span><span class="p">);</span>          			
</span><span class="line"><span class="kd">var</span> <span class="nx">dataset</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">            <span class="p">[</span><span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">],</span> <span class="p">[</span><span class="mi">480</span><span class="p">,</span> <span class="mi">90</span><span class="p">],</span> <span class="p">[</span><span class="mi">250</span><span class="p">,</span> <span class="mi">50</span><span class="p">],</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">133</span><span class="p">],</span> <span class="p">[</span><span class="mi">330</span><span class="p">,</span> <span class="mi">95</span><span class="p">],</span>
</span><span class="line">            <span class="p">[</span><span class="mi">410</span><span class="p">,</span> <span class="mi">12</span><span class="p">],</span> <span class="p">[</span><span class="mi">475</span><span class="p">,</span> <span class="mi">44</span><span class="p">],</span> <span class="p">[</span><span class="mi">25</span><span class="p">,</span> <span class="mi">167</span><span class="p">],</span> <span class="p">[</span><span class="mi">185</span><span class="p">,</span> <span class="mi">21</span><span class="p">],</span> <span class="p">[</span><span class="mi">120</span><span class="p">,</span> <span class="mi">88</span><span class="p">],[</span><span class="mi">600</span><span class="p">,</span> <span class="mi">150</span><span class="p">]</span>
</span><span class="line">              <span class="p">];</span>	
</span><span class="line"><span class="kd">var</span> <span class="nx">circle</span> <span class="o">=</span> <span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>                        <span class="c1">//1</span>
</span><span class="line">              <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">dataset</span><span class="p">)</span>                                <span class="c1">//2</span>
</span><span class="line">              <span class="p">.</span><span class="nx">enter</span><span class="p">()</span>                                      <span class="c1">//3</span>
</span><span class="line">              <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>                             <span class="c1">//4</span>
</span><span class="line">              <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]})</span>
</span><span class="line">              <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]})</span>
</span><span class="line">              <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class="line"><span class="nx">circle</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span><span class="s2">&quot;teal&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div id="container3"></div>
<script>
             var svg = d3.select("#container3")
             	      .append("svg")
          			  .attr("width",200)
          			  .attr("height",200);
          			 
        var dataset = [
                [50, 20], [480, 90], [250, 50], [100, 133], [330, 95],
                [410, 12], [475, 44], [25, 167], [185, 21], [120, 88],[600, 150]
              ];		  
          	var circle=svg.selectAll("circle")
          	.data(dataset)
          	.enter()
          	   .append("circle")
			   .attr("cx",function(d){return d[0]})
			   .attr("cy",function(d){return d[1]})
			   .attr("r", 10);
			   
			circle.attr("fill","teal");
</script>

<p>Мы нарисовали много кружков, но у нас появилось пара проблем.</p>

<p>Во-первых кружков на рисунке явно меньше, чем элементов в нашем массиве. Это произошло из-за того, что размер нашего svg-элемента всего 200x200 пикселей, а значения в массиве dataset выходят за эти границы.</p>

<p>Во-вторых координатная система в svg устроена так, что ось Y направлена сверху вниз, что нас не устраивает, так как не очень удобно для восприятия.</p>

<p>Обе эти проблемы решаются с помощью функции масштабирования: scale. Это отображение, переводящее число из одного интервала в число из другого интервала. Областью значений чаще всего является разрешение картинки в пикселях. На рисунке ниже показан пример работы масштабирования для числовой и временной осей (рисунок взят из <a href="http://www.d3noob.org/2012/12/setting-scales-domains-and-ranges-in.html">cтатьи</a> с более подробным пояснением).</p>

<p><img src="http://datadeep.ru/images/scale1.png" title="Scale" /></p>

<p>В примере ниже мы используем два таких отображения (для осей X и Y), задавая области определения (domain), области значений (range) и характер функции (linear).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="mi">400</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">h</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">padding</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">dataset</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">            <span class="p">[</span><span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">],</span> <span class="p">[</span><span class="mi">480</span><span class="p">,</span> <span class="mi">90</span><span class="p">],</span> <span class="p">[</span><span class="mi">250</span><span class="p">,</span> <span class="mi">50</span><span class="p">],</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">133</span><span class="p">],</span> <span class="p">[</span><span class="mi">330</span><span class="p">,</span> <span class="mi">95</span><span class="p">],</span>
</span><span class="line">            <span class="p">[</span><span class="mi">410</span><span class="p">,</span> <span class="mi">12</span><span class="p">],</span> <span class="p">[</span><span class="mi">475</span><span class="p">,</span> <span class="mi">44</span><span class="p">],</span> <span class="p">[</span><span class="mi">25</span><span class="p">,</span> <span class="mi">167</span><span class="p">],</span> <span class="p">[</span><span class="mi">185</span><span class="p">,</span> <span class="mi">21</span><span class="p">],</span> <span class="p">[</span><span class="mi">120</span><span class="p">,</span> <span class="mi">88</span><span class="p">],[</span><span class="mi">600</span><span class="p">,</span> <span class="mi">150</span><span class="p">]</span>
</span><span class="line">              <span class="p">];</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">xScale</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
</span><span class="line">                     <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">dataset</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="p">})])</span>
</span><span class="line">                     <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="nx">padding</span><span class="p">,</span> <span class="nx">w</span><span class="o">-</span><span class="nx">padding</span><span class="o">*</span><span class="mi">2</span><span class="p">]);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">yScale</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
</span><span class="line">                     <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">dataset</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="p">})])</span>
</span><span class="line">                     <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="nx">h</span> <span class="o">-</span> <span class="nx">padding</span><span class="p">,</span> <span class="nx">padding</span><span class="p">]);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">svg</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#container&quot;</span><span class="p">)</span>
</span><span class="line">            <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;svg&quot;</span><span class="p">)</span>
</span><span class="line">            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span><span class="nx">w</span><span class="p">)</span>
</span><span class="line">            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">circle</span> <span class="o">=</span> <span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class="line">                <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">dataset</span><span class="p">)</span>
</span><span class="line">                <span class="p">.</span><span class="nx">enter</span><span class="p">()</span>
</span><span class="line">                <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class="line">                <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">xScale</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">])})</span>
</span><span class="line">                <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">yScale</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">])})</span>
</span><span class="line">                <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class="line">                <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span><span class="s2">&quot;teal&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div id="container4"></div>
<script>
       var w = 400;
        var h = 200;
        var padding = 30;
        
        
        var dataset = [
                [50, 20], [480, 90], [250, 50], [100, 133], [330, 95],
                [410, 12], [475, 44], [25, 167], [185, 21], [120, 88],[600, 150]
              ];
                
       var xScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[0]; })])
                     .range([padding, w-padding*2]); 
                     
        var yScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[1]; })])
                     .range([h - padding, padding]);

             var svg = d3.select("#container4")
             	      .append("svg")
          			  .attr("width",w)
          			  .attr("height",h);
          			 
	
              	  
          	var circle=svg.selectAll("circle")
          	.data(dataset)
          	.enter()
          	   .append("circle")
			   .attr("cx",function(d){return xScale(d[0])})
			   .attr("cy",function(d){return yScale(d[1])})
			   .attr("r", 5)
			   .attr("fill","teal");
</script>

<p>Теперь все точки на месте и будут отображаться корректно, даже если мы решим изменить размер контейнера.</p>

<p>Осталось совсем немного: нарисуем оси с помощью функции d3.svg.axis(), добавим еще один масштаб для радиусов окружности и поиграемся с цветом. Чтобы оси были тонкие и красивые, добавим немного CSS. Итоговый код страницы будет выглядеть как-то так:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (intro_d3_js.html)</span> <a href="http://datadeep.ru/downloads/code/intro_d3_js.html">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class="line"><span class="nt">&lt;html&gt;</span>
</span><span class="line">    <span class="nt">&lt;head&gt;</span>
</span><span class="line">        <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        <span class="nt">&lt;title&gt;</span>D3 Page<span class="nt">&lt;/title&gt;</span>
</span><span class="line">        <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;d3/d3.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">
</span><span class="line">        <span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span><span class="line">                     <span class="nc">.axis</span> <span class="nt">path</span><span class="o">,</span>
</span><span class="line">                     <span class="nc">.axis</span> <span class="nt">line</span> <span class="p">{</span>
</span><span class="line">                                  <span class="n">fill</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class="line">                                  <span class="n">stroke</span><span class="o">:</span> <span class="nb">black</span><span class="p">;</span>
</span><span class="line">                                  <span class="n">shape</span><span class="o">-</span><span class="n">rendering</span><span class="o">:</span> <span class="n">crispEdges</span><span class="p">;</span>
</span><span class="line">                                <span class="p">}</span>
</span><span class="line">        <span class="nt">&lt;/style&gt;</span>
</span><span class="line">    <span class="nt">&lt;/head&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="nt">&lt;body&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="mi">400</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">h</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">padding</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">svg</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#container&quot;</span><span class="p">)</span>
</span><span class="line">             <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;svg&quot;</span><span class="p">)</span>
</span><span class="line">          	 <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="nx">w</span><span class="p">)</span>
</span><span class="line">          	 <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="nx">h</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">dataset</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">            <span class="p">[</span><span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">],</span> <span class="p">[</span><span class="mi">480</span><span class="p">,</span> <span class="mi">90</span><span class="p">],</span> <span class="p">[</span><span class="mi">250</span><span class="p">,</span> <span class="mi">50</span><span class="p">],</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">133</span><span class="p">],</span> <span class="p">[</span><span class="mi">330</span><span class="p">,</span> <span class="mi">95</span><span class="p">],</span>
</span><span class="line">            <span class="p">[</span><span class="mi">410</span><span class="p">,</span> <span class="mi">12</span><span class="p">],</span> <span class="p">[</span><span class="mi">475</span><span class="p">,</span> <span class="mi">44</span><span class="p">],</span> <span class="p">[</span><span class="mi">25</span><span class="p">,</span> <span class="mi">167</span><span class="p">],</span> <span class="p">[</span><span class="mi">185</span><span class="p">,</span> <span class="mi">21</span><span class="p">],</span> <span class="p">[</span><span class="mi">120</span><span class="p">,</span> <span class="mi">88</span><span class="p">],[</span><span class="mi">600</span><span class="p">,</span> <span class="mi">150</span><span class="p">]</span>
</span><span class="line">              <span class="p">];</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">xScale</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
</span><span class="line">               <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">dataset</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="p">})])</span>
</span><span class="line">               <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="nx">padding</span><span class="p">,</span> <span class="nx">w</span><span class="o">-</span><span class="nx">padding</span><span class="o">*</span><span class="mi">2</span><span class="p">]);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">yScale</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
</span><span class="line">                <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">dataset</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="p">})])</span>
</span><span class="line">                 <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="nx">h</span> <span class="o">-</span> <span class="nx">padding</span><span class="p">,</span> <span class="nx">padding</span><span class="p">]);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">rScale</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
</span><span class="line">               <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">dataset</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="p">})])</span>
</span><span class="line">               <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">]);</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">xAxis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">axis</span><span class="p">()</span>
</span><span class="line">               <span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">xScale</span><span class="p">)</span>
</span><span class="line">               <span class="p">.</span><span class="nx">orient</span><span class="p">(</span><span class="s2">&quot;bottom&quot;</span><span class="p">)</span>
</span><span class="line">               <span class="p">.</span><span class="nx">ticks</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">yAxis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">axis</span><span class="p">()</span>
</span><span class="line">              <span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">yScale</span><span class="p">)</span>
</span><span class="line">              <span class="p">.</span><span class="nx">orient</span><span class="p">(</span><span class="s2">&quot;left&quot;</span><span class="p">)</span>
</span><span class="line">              <span class="p">.</span><span class="nx">ticks</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class="line">   <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">dataset</span><span class="p">)</span>
</span><span class="line">   <span class="p">.</span><span class="nx">enter</span><span class="p">()</span>
</span><span class="line">   <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class="line">   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">xScale</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]);})</span>
</span><span class="line">   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">yScale</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]);})</span>
</span><span class="line">   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">rScale</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]);})</span>
</span><span class="line">   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span> <span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">100</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="s2">&quot;teal&quot;</span><span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="k">return</span> <span class="s2">&quot;orange&quot;</span><span class="p">}});</span>
</span><span class="line">
</span><span class="line">		
</span><span class="line"><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;g&quot;</span><span class="p">)</span>
</span><span class="line">   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;axis&quot;</span><span class="p">)</span>
</span><span class="line">   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span> <span class="s2">&quot;translate(0,&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">h</span> <span class="o">-</span> <span class="nx">padding</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">)</span>
</span><span class="line">   <span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">xAxis</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;g&quot;</span><span class="p">)</span>
</span><span class="line">   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;axis&quot;</span><span class="p">)</span>
</span><span class="line">   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span> <span class="s2">&quot;translate(&quot;</span> <span class="o">+</span> <span class="nx">padding</span> <span class="o">+</span> <span class="s2">&quot;,0)&quot;</span><span class="p">)</span>
</span><span class="line">   <span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">yAxis</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>А вот и результат наших трудов:</p>

<div id="container5"></div>
<script type="text/javascript">
        
        var w = 400;
        var h = 200;
        var padding = 30;

        
        var svg = d3.select("#container5")
             	      .append("svg")
          			  .attr("width", w)
          			  .attr("height", h);
        
        var dataset = [
                [50, 20], [480, 90], [250, 50], [100, 133], [330, 95],
                [410, 12], [475, 44], [25, 167], [185, 21], [120, 88],[600, 150]
              ];

        
        var xScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[0]; })])
                     .range([padding, w-padding*2]); 
                     
        var yScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[1]; })])
                     .range([h - padding, padding]);
                     
        var rScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[1]; })])
                     .range([2, 5]);  
                     
                                
        var xAxis = d3.svg.axis()
                  .scale(xScale)
                  .orient("bottom")
                  .ticks(5);
                  
         var yAxis = d3.svg.axis()
                  .scale(yScale)
                  .orient("left")
                  .ticks(5);                    
                     
                     
         svg.selectAll("circle")
			   .data(dataset)
			   .enter()
			   .append("circle")
			   .attr("cx", function(d) {return xScale(d[0]);})
			   .attr("cy", function(d) {return yScale(d[1]);})
			   .attr("r", function(d) { return rScale(d[1]);})
			   .attr("fill",function(d){if (d[0]>100) {return "teal"} else {return "orange"}});

		
			svg.append("g")
			    .attr("class", "axis")
			    .attr("transform", "translate(0," + (h - padding) + ")")
                .call(xAxis);  
            svg.append("g")
                .attr("class", "axis")
                .attr("transform", "translate(" + padding + ",0)")
                .call(yAxis);                                 
        
</script>

<h2 id="section-1">Источники для самостоятельного изучения</h2>

<p>В этой статье мы очень поверхностно ознакомились с самыми основными принципами рисования графики с помощью D3.js. Для подробного изучения стоит прочитать несколько книг.</p>

<p>Начинать стоит с книги <strong>Interactive Data Visualization</strong>. Лучше использовать ее <a href="http://chimera.labs.oreilly.com/books/1230000000345/">бесплатную электронную версию</a>, потому что там более актуальный код и есть интерактивные примеры.</p>

<p>Для дальнейшего углубления подойдет <strong>Data Visualization with D3.js Cookbook</strong>. В ней хорошо и подробно описаны фундаментальные принципы работы библиотеки.</p>

<p><img src="http://datadeep.ru/images/bookcover1.jpg" width="302" height="373" title="Interactive Data Visualization" /> <img src="http://datadeep.ru/images/bookcover2.png" title="Data Visualization with D3.js Cookbook" /></p>

<p>Помимо книг, есть несколько хороших источников знаний по теме в Интернете:</p>

<ul>
  <li><a href="http://bost.ocks.org/mike/">сайт Майка Бостока</a> — автора библиотеки. Здесь много хороших примеров и просто интересных статей;</li>
  <li><a href="https://github.com/mbostock/d3/wiki">wiki проекта на GitHub</a> — наиболее полное описание всех функций;</li>
  <li><a href="https://www.dashingd3js.com/">Learn how to make Data Visualizations with D3.js</a> — пошаговое руководство для начинающих;</li>
  <li><a href="http://square.github.io/intro-to-d3/">Intro to D3.js</a> — еще одно;</li>
  <li><a href="http://www.d3noob.org/">D3.js Tips &amp; Tricks</a> — здесь встречаются полезные советы и объяснения тонких мест.</li>
</ul>

<p>Единственным полезным источником на русском (помимо нашего блога) являются материалы «Лаборатории данных»:</p>

<ul>
  <li><a href="http://d3-js.ru/mike/join/">«Мыслим связками»</a> — перевод статьи Майка Бостока. Очень полезная статья для понимания связи между данными и представлением в D3;</li>
  <li><a href="http://habrahabr.ru/company/datalaboratory/blog/217905/">Введение в D3</a> на Хабре;</li>
  <li><a href="http://brainwashing.pro/dataviz-online">Онлайн-курс «Визуализация. Основы»</a> включает в себя раздел про D3.</li>
</ul>

]]></content>
  </entry>
  
</feed>
